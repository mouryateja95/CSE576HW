{
    "Contributors": [
        "Prutha Gaherwar"
    ],
    "Source": [
        "SPLASH"
    ],
    "Categories": [
        "Structered Query Generation"
    ],
    "Definition": "Write an SQL query that will return the data asked for in the question.",
    "Positive Examples": [
        {
            "input": "How many male students (sex is 'M') are allergic to any type of food?",
            "output": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
            "explanation": "The query will return the data that is asked for in the question"
        },
        {
            "input": "Find the number of male (sex is 'M') students who have some food type allery.",
            "output": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
            "explanation": "The query will return the data that is asked for in the question"
        }
    ],
    "Negative Examples": [
        {
            "input": "Show the facility codes of apartments with more than 4 bedrooms.",
            "output": "SELECT Avg ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = \"Provisional\"",
            "explanation": "The query will not return the data that is asked for in the question"
        },
        {
            "input": "What are the store names of drama workshop groups?",
            "output": "SELECT product_name , Sum ( * ) FROM Products GROUP BY product_name",
            "explanation": "The query will not return the data that is asked for in the question"
        }
    ],
    "Instances": [
        {
            "input": "What are the store names of drama workshop groups?",
            "output": [
                "SELECT Store_Name FROM Drama_Workshop_Groups"
            ]
        },
        {
            "input": "What is the total number of products that are in orders with status \"Cancelled\"?",
            "output": [
                "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
            ]
        },
        {
            "input": "What are names of customers who never ordered product Latte.",
            "output": [
                "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'"
            ]
        },
        {
            "input": "Find the average and maximum hours for the students whose tryout decision is yes.",
            "output": [
                "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "What are the email addresses of the drama workshop groups with address in Alaska state?",
            "output": [
                "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\""
            ]
        },
        {
            "input": "How many types of products have Rodrick Heaney bought in total?",
            "output": [
                "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""
            ]
        },
        {
            "input": "Count the number of colors.",
            "output": [
                "SELECT count(*) FROM ref_colors"
            ]
        },
        {
            "input": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
            "output": [
                "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'"
            ]
        },
        {
            "input": "What is the first and last name of the students who are not in the largest major?",
            "output": [
                "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "What is the average price of wines produced in appelations in Sonoma County?",
            "output": [
                "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\""
            ]
        },
        {
            "input": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
            "output": [
                "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos"
            ]
        },
        {
            "input": "List the object number of railways that do not have any trains.",
            "output": [
                "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
            ]
        },
        {
            "input": "Show the customer name, customer address city, date from, and date to for each customer address history.",
            "output": [
                "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id"
            ]
        },
        {
            "input": "What are the names of the members and branches at which they are registered sorted by year of registration?",
            "output": [
                "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year"
            ]
        },
        {
            "input": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
            "output": [
                "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'"
            ]
        },
        {
            "input": "Who made the latest order?",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"
            ]
        },
        {
            "input": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.",
            "output": [
                "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)"
            ]
        },
        {
            "input": "Select the name of each manufacturer along with the name and price of its most expensive product.",
            "output": [
                "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"
            ]
        },
        {
            "input": "What are the years, titles, and publishers for all books, ordered by year descending?",
            "output": [
                "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC"
            ]
        },
        {
            "input": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
            "output": [
                "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
            ]
        },
        {
            "input": "Return the the names of the drama workshop groups that are located in Feliciaberg city.",
            "output": [
                "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\""
            ]
        },
        {
            "input": "Find the states where have the colleges whose enrollments are less than the largest size.",
            "output": [
                "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)"
            ]
        },
        {
            "input": "What are the member names and hometowns of those who registered at a branch in 2016?",
            "output": [
                "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016"
            ]
        },
        {
            "input": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
            "output": [
                "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\""
            ]
        },
        {
            "input": "What are the names and cities of the branches that do not have any registered members?",
            "output": [
                "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"
            ]
        },
        {
            "input": "Show the product name and total order quantity for each product.",
            "output": [
                "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id"
            ]
        },
        {
            "input": "What are the names of products with 'white' as their color description?",
            "output": [
                "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\""
            ]
        },
        {
            "input": "Find the name of different colleges involved in the tryout in alphabetical order.",
            "output": [
                "SELECT DISTINCT cName FROM tryout ORDER BY cName"
            ]
        },
        {
            "input": "What is the name of the product with the color description 'yellow'?",
            "output": [
                "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'"
            ]
        },
        {
            "input": "Count the number of products with the 'hot' charactersitic.",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\""
            ]
        },
        {
            "input": "List the names of all distinct wines that are made of red color grape.",
            "output": [
                "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\""
            ]
        },
        {
            "input": "Find the city where the most customers live.",
            "output": [
                "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "How many customers are there?",
            "output": [
                "SELECT count(*) FROM customers"
            ]
        },
        {
            "input": "List the description of all the colors.",
            "output": [
                "SELECT color_description FROM ref_colors"
            ]
        },
        {
            "input": "How many products have the color description 'red' and the characteristic name 'slow'?",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\""
            ]
        },
        {
            "input": "Count the number of ships.",
            "output": [
                "SELECT count(*) FROM ship"
            ]
        },
        {
            "input": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
            "output": [
                "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC"
            ]
        },
        {
            "input": "Find the number and average age of students living in each city.",
            "output": [
                "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code"
            ]
        },
        {
            "input": "What are the dates when customers with ids between 10 and 20 became customers?",
            "output": [
                "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"
            ]
        },
        {
            "input": "list the card number of all members whose hometown address includes word \"Kentucky\".",
            "output": [
                "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""
            ]
        },
        {
            "input": "What are the names of the dorm that does not have a TV Lounge?",
            "output": [
                "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'"
            ]
        },
        {
            "input": "Which college has any student who is a goalie and succeeded in the tryout.",
            "output": [
                "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'"
            ]
        },
        {
            "input": "Find the white grape used to produce wines with scores above 90.",
            "output": [
                "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90"
            ]
        },
        {
            "input": "Find the name of the swimmer who has at least 2 records.",
            "output": [
                "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "What is the name and open year for the branch with most number of memberships registered in 2016?",
            "output": [
                "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the first name of students living in city PHL whose age is between 20 and 25.",
            "output": [
                "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25"
            ]
        },
        {
            "input": "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
            "output": [
                "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\""
            ]
        },
        {
            "input": "Which city has the most customers living in?",
            "output": [
                "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the names of schools that have some players in the mid position but not in the goalie position.",
            "output": [
                "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'"
            ]
        },
        {
            "input": "Show different builders of railways, along with the corresponding number of railways using each builder.",
            "output": [
                "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder"
            ]
        },
        {
            "input": "How many drama workshop groups are there in each city? Return both the city and the count.",
            "output": [
                "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town"
            ]
        },
        {
            "input": "Show the name, location, and number of platforms for all stations.",
            "output": [
                "SELECT name ,  LOCATION ,  number_of_platforms FROM station"
            ]
        },
        {
            "input": "What are the wines that have prices higher than 50 and made of Red color grapes?",
            "output": [
                "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50"
            ]
        },
        {
            "input": "Find the numbers of different majors and cities.",
            "output": [
                "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student"
            ]
        },
        {
            "input": "What are the total purchases for members rated at level 6?",
            "output": [
                "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
            ]
        },
        {
            "input": "What are the descriptions for each color?",
            "output": [
                "SELECT color_description FROM ref_colors"
            ]
        },
        {
            "input": "Show all cities along with the number of drama workshop groups in each city.",
            "output": [
                "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town"
            ]
        },
        {
            "input": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
            "output": [
                "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
            ]
        },
        {
            "input": "Find the number of products with category \"Spices\" and typically sold above 1000.",
            "output": [
                "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000"
            ]
        },
        {
            "input": "Count the number of characteristics of the product named 'laurel'.",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""
            ]
        },
        {
            "input": "Which 3 wineries produce the most wines made from white grapes?",
            "output": [
                "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
            "output": [
                "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
            ]
        },
        {
            "input": "How many students live in each city and what are their average ages?",
            "output": [
                "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code"
            ]
        },
        {
            "input": "Return the average, maximum, and total revenues across all manufacturers.",
            "output": [
                "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers"
            ]
        },
        {
            "input": "What are the order details of the products with price higher than 2000?",
            "output": [
                "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000"
            ]
        },
        {
            "input": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
            "output": [
                "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50"
            ]
        },
        {
            "input": "Find the name and active date of the customer that use email as the contact channel.",
            "output": [
                "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'"
            ]
        },
        {
            "input": "What are the names of all the states with college students playing in the mid position but no goalies?",
            "output": [
                "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'"
            ]
        },
        {
            "input": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
            "output": [
                "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\""
            ]
        },
        {
            "input": "What is the total number of enrollment of schools that do not have any goalie player?",
            "output": [
                "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"
            ]
        },
        {
            "input": "What is the total number of students enrolled in schools without any goalies?",
            "output": [
                "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"
            ]
        },
        {
            "input": "Compute the total order quantities of the product \"photo\".",
            "output": [
                "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\""
            ]
        },
        {
            "input": "Find the list of cities that no customer is living in.",
            "output": [
                "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)"
            ]
        },
        {
            "input": "What are the names, details and data types of the characteristics which are never used by any product?",
            "output": [
                "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id"
            ]
        },
        {
            "input": "What are the first names of all students who live in the dorm with the most amenities?",
            "output": [
                "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "Count the number of colors that are not used in any products.",
            "output": [
                "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )"
            ]
        },
        {
            "input": "Which colleges do the tryout players whose name starts with letter D go to?",
            "output": [
                "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'"
            ]
        },
        {
            "input": "What are the cities that do not have any branches with more than 100 members?",
            "output": [
                "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100"
            ]
        },
        {
            "input": "What are the names of the colleges that are larger than at least one college in Florida?",
            "output": [
                "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')"
            ]
        },
        {
            "input": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
            "output": [
                "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\""
            ]
        },
        {
            "input": "What is the name of the event that happened in the most recent year?",
            "output": [
                "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the station name with greatest number of trains.",
            "output": [
                "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names of all students who successfully tried out for the position of striker?",
            "output": [
                "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'"
            ]
        },
        {
            "input": "Show the number of trains",
            "output": [
                "SELECT count(*) FROM train"
            ]
        },
        {
            "input": "Which marketing region has the most drama workshop groups? Give me the region code.",
            "output": [
                "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the resident details containing the substring 'Miss'?",
            "output": [
                "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'"
            ]
        },
        {
            "input": "How many customers do we have?",
            "output": [
                "SELECT count(*) FROM CUSTOMERS"
            ]
        },
        {
            "input": "Compute the average active time span of contact channels.",
            "output": [
                "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels"
            ]
        },
        {
            "input": "Find the number of different products that are produced by companies at different headquarter cities.",
            "output": [
                "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter"
            ]
        },
        {
            "input": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
            "output": [
                "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1"
            ]
        },
        {
            "input": "How many characteristics are there?",
            "output": [
                "SELECT count(*) FROM CHARACTERISTICS"
            ]
        },
        {
            "input": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
            "output": [
                "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
            ]
        },
        {
            "input": "Find the number of female students (with F sex) living in Smith Hall",
            "output": [
                "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'"
            ]
        },
        {
            "input": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?",
            "output": [
                "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20"
            ]
        },
        {
            "input": "Find the average prices of all products from each manufacture, and list each company's name.",
            "output": [
                "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"
            ]
        },
        {
            "input": "Find the names of customers who never ordered product Latte.",
            "output": [
                "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'"
            ]
        },
        {
            "input": "What is the total revenue of companies started by founder?",
            "output": [
                "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder"
            ]
        },
        {
            "input": "What are the states with colleges that have enrollments less than the some other college?",
            "output": [
                "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)"
            ]
        },
        {
            "input": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
            "output": [
                "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\""
            ]
        },
        {
            "input": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\""
            ]
        },
        {
            "input": "Give me the name of the customer who ordered the most items in total.",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the id and builder of the railway that are associated with the most trains.",
            "output": [
                "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Show all cities where at least one customer lives in but no performer lives in.",
            "output": [
                "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID"
            ]
        },
        {
            "input": "Find the average price of all product clothes.",
            "output": [
                "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
            ]
        },
        {
            "input": "How many states that have some college students playing in the mid position but not in the goalie position.",
            "output": [
                "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')"
            ]
        },
        {
            "input": "What are the names of products produced by both Creative Labs and Sony?",
            "output": [
                "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'"
            ]
        },
        {
            "input": "Give the names of characteristics that are in two or more products?",
            "output": [
                "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2"
            ]
        },
        {
            "input": "Count the total number of bookings made.",
            "output": [
                "SELECT count(*) FROM BOOKINGS"
            ]
        },
        {
            "input": "What are the planned delivery date and actual delivery date for each booking?",
            "output": [
                "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS"
            ]
        },
        {
            "input": "Show id and location of railways that are associated with more than one train.",
            "output": [
                "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1"
            ]
        },
        {
            "input": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?",
            "output": [
                "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\""
            ]
        },
        {
            "input": "What are the name of the players who received a card in descending order of the hours of training?",
            "output": [
                "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC"
            ]
        },
        {
            "input": "How many products are there?",
            "output": [
                "SELECT count(*) FROM products"
            ]
        },
        {
            "input": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
            "output": [
                "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20"
            ]
        },
        {
            "input": "What is the average time span of contact channels in the database?",
            "output": [
                "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels"
            ]
        },
        {
            "input": "What are the speeds of the longest roller coaster?",
            "output": [
                "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1"
            ]
        },
        {
            "input": "List the distinct payment method codes with the number of orders made",
            "output": [
                "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code"
            ]
        },
        {
            "input": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
            "output": [
                "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'"
            ]
        },
        {
            "input": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
            "output": [
                "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010"
            ]
        },
        {
            "input": "What are the total order quantities of photo products?",
            "output": [
                "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\""
            ]
        },
        {
            "input": "Find the states where have some college students in tryout and their decisions are yes.",
            "output": [
                "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "What is the unit of measuerment of the product category code \"Herbs\"?",
            "output": [
                "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\""
            ]
        },
        {
            "input": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
            "output": [
                "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\""
            ]
        },
        {
            "input": "How many appelations are in Napa Country?",
            "output": [
                "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\""
            ]
        },
        {
            "input": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
            "output": [
                "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90"
            ]
        },
        {
            "input": "Return the name of the characteristic that is most common across all products.",
            "output": [
                "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the name of the customer who made the order of the largest amount of goods.",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"
            ]
        },
        {
            "input": "How many students received a yes from tryouts?",
            "output": [
                "SELECT count(*) FROM tryout WHERE decision  =  'yes'"
            ]
        },
        {
            "input": "What are the names of wines made from red grapes?",
            "output": [
                "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\""
            ]
        },
        {
            "input": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
            "output": [
                "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\""
            ]
        },
        {
            "input": "Find the total number of students living in the male dorm (with gender M).",
            "output": [
                "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'"
            ]
        },
        {
            "input": "What is the average price of clothes?",
            "output": [
                "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
            ]
        },
        {
            "input": "What are the titles of movies and books corresponding to companies incorporated in China?",
            "output": [
                "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'"
            ]
        },
        {
            "input": "Show all distinct city where branches with at least 100 memberships are located.",
            "output": [
                "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100"
            ]
        },
        {
            "input": "Show all the planned delivery dates and actual delivery dates of bookings.",
            "output": [
                "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS"
            ]
        },
        {
            "input": "What are names for top three branches with most number of membership?",
            "output": [
                "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
            ]
        },
        {
            "input": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
            "output": [
                "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\""
            ]
        },
        {
            "input": "Find the country of all appelations who have at most three wines.",
            "output": [
                "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3"
            ]
        },
        {
            "input": "How many stadiums are there?",
            "output": [
                "SELECT count(*) FROM stadium"
            ]
        },
        {
            "input": "What is the product ID of the most frequently ordered item on invoices?",
            "output": [
                "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Compute the number of products with a price larger than or equal to $180.",
            "output": [
                "SELECT count(*) FROM products WHERE price >= 180"
            ]
        },
        {
            "input": "Which product has been ordered most number of times?",
            "output": [
                "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the station name and number of trains in each station.",
            "output": [
                "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id"
            ]
        },
        {
            "input": "What is the marketing region code that has the most drama workshop groups?",
            "output": [
                "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
            "output": [
                "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2"
            ]
        },
        {
            "input": "What are the phones and emails of workshop groups in which services are performed?",
            "output": [
                "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID"
            ]
        },
        {
            "input": "How many students are enrolled in college?",
            "output": [
                "SELECT sum(enr) FROM College"
            ]
        },
        {
            "input": "What are the titles and authors or editors that correspond to books made after 1989?",
            "output": [
                "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989"
            ]
        },
        {
            "input": "Find the name and college of students whose decisions are yes in the tryout.",
            "output": [
                "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "Return the total number of distinct customers.",
            "output": [
                "SELECT count(*) FROM customers"
            ]
        },
        {
            "input": "In which state is the college that Charles attends?",
            "output": [
                "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'"
            ]
        },
        {
            "input": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
            "output": [
                "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'"
            ]
        },
        {
            "input": "Find the name of the most expensive hardware product.",
            "output": [
                "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the names of stadiums that the most swimmers have been to.",
            "output": [
                "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "How many bookings do we have?",
            "output": [
                "SELECT count(*) FROM BOOKINGS"
            ]
        },
        {
            "input": "What are the names of the schools with the top 3 largest class sizes?",
            "output": [
                "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
            ]
        },
        {
            "input": "What is the area for the appelation which produced the most wines prior to 2010?",
            "output": [
                "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find all details for each swimmer.",
            "output": [
                "SELECT * FROM swimmer"
            ]
        },
        {
            "input": "Find the states or counties where the stores with marketing region code \"CA\" are located.",
            "output": [
                "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\""
            ]
        },
        {
            "input": "How many dorms are in the database?",
            "output": [
                "SELECT count(*) FROM dorm"
            ]
        },
        {
            "input": "How many characteristics does the product named \"sesame\" have?",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
            ]
        },
        {
            "input": "List the actual delivery date for all the orders with quantity 1",
            "output": [
                "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1"
            ]
        },
        {
            "input": "Return the founder of Sony.",
            "output": [
                "SELECT founder FROM manufacturers WHERE name  =  'Sony'"
            ]
        },
        {
            "input": "For which countries are there more than four distinct addresses listed?",
            "output": [
                "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4"
            ]
        },
        {
            "input": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
            "output": [
                "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\""
            ]
        },
        {
            "input": "What are the names of wines produced before any wine from the Brander winery?",
            "output": [
                "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")"
            ]
        },
        {
            "input": "Find the name and capacity of the dorm with least number of amenities.",
            "output": [
                "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "Find the customer name and date of the orders that have the status \"Delivered\".",
            "output": [
                "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""
            ]
        },
        {
            "input": "How many characteristics does the product named \"laurel\" have?",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""
            ]
        },
        {
            "input": "How many different levels do members have?",
            "output": [
                "SELECT count(DISTINCT LEVEL) FROM member"
            ]
        },
        {
            "input": "Find the number of students whose age is older than the average age for each gender.",
            "output": [
                "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"
            ]
        },
        {
            "input": "What are the name and active date of the customers whose contact channel code is email?",
            "output": [
                "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'"
            ]
        },
        {
            "input": "Show all train names and times in stations in London in descending order by train time.",
            "output": [
                "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC"
            ]
        },
        {
            "input": "Select all the data from the products and each product's manufacturer.",
            "output": [
                "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code"
            ]
        },
        {
            "input": "What are all the company names that have a book published by Alyson?",
            "output": [
                "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'"
            ]
        },
        {
            "input": "What is the name of the hardware product with the greatest price?",
            "output": [
                "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the number of students playing as a goalie?",
            "output": [
                "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'"
            ]
        },
        {
            "input": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?",
            "output": [
                "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'"
            ]
        },
        {
            "input": "What are the customer name and date of the orders whose status is \"Delivered\".",
            "output": [
                "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""
            ]
        },
        {
            "input": "What are the names for the 3 branches that have the most memberships?",
            "output": [
                "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
            ]
        },
        {
            "input": "How many schools have some students playing in goalie and mid positions.",
            "output": [
                "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')"
            ]
        },
        {
            "input": "Tell me the payment method used by the customer who ordered the least amount of goods in total.",
            "output": [
                "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"
            ]
        },
        {
            "input": "What is the name of each dorm that has a TV Lounge but no study rooms?",
            "output": [
                "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"
            ]
        },
        {
            "input": "Show the names of all the clients with no booking.",
            "output": [
                "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID"
            ]
        },
        {
            "input": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
            "output": [
                "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\""
            ]
        },
        {
            "input": "What are the average, maximum and total revenues of all companies?",
            "output": [
                "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers"
            ]
        },
        {
            "input": "Show the member name and hometown who registered a branch in 2016.",
            "output": [
                "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016"
            ]
        },
        {
            "input": "What are the different names of the colleges involved in the tryout in alphabetical order?",
            "output": [
                "SELECT DISTINCT cName FROM tryout ORDER BY cName"
            ]
        },
        {
            "input": "How many products are not made by Sony?",
            "output": [
                "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')"
            ]
        },
        {
            "input": "Show the minimum, average, maximum order quantity of all invoices.",
            "output": [
                "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES"
            ]
        },
        {
            "input": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?",
            "output": [
                "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'"
            ]
        },
        {
            "input": "What are the id and details of the customers who have at least 3 events?",
            "output": [
                "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3"
            ]
        },
        {
            "input": "How many dorms are there?",
            "output": [
                "SELECT count(*) FROM dorm"
            ]
        },
        {
            "input": "How many products have prices of at least 180?",
            "output": [
                "SELECT count(*) FROM products WHERE price >= 180"
            ]
        },
        {
            "input": "List the customer event id and the corresponding move in date and property id.",
            "output": [
                "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events"
            ]
        },
        {
            "input": "What are the different product names for products that have the 'warm' characteristic:?",
            "output": [
                "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""
            ]
        },
        {
            "input": "When is the last day any resident moved in?",
            "output": [
                "SELECT max(date_moved_in) FROM Residents"
            ]
        },
        {
            "input": "Show all locations which don't have a train station with at least 15 platforms.",
            "output": [
                "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15"
            ]
        },
        {
            "input": "What are the grapes and appelations of each wine?",
            "output": [
                "SELECT Grape ,  Appelation FROM WINE"
            ]
        },
        {
            "input": "Find the id and color description of the products with at least 2 characteristics.",
            "output": [
                "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
            "output": [
                "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
            ]
        },
        {
            "input": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
            "output": [
                "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"
            ]
        },
        {
            "input": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
            "output": [
                "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name"
            ]
        },
        {
            "input": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
            "output": [
                "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
            ]
        },
        {
            "input": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
            "output": [
                "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'"
            ]
        },
        {
            "input": "What are characteristic names used at least twice across all products?",
            "output": [
                "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2"
            ]
        },
        {
            "input": "Count the number of characteristics the product 'sesame' has.",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
            ]
        },
        {
            "input": "How many orders have detail \"Second time\"?",
            "output": [
                "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\""
            ]
        },
        {
            "input": "What is the average and maximum number of hours students who made the team practiced?",
            "output": [
                "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "Find the name of product that is produced by both companies Creative Labs and Sony.",
            "output": [
                "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'"
            ]
        },
        {
            "input": "What is the name of the customer that has purchased the most items?",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the names of trains and locations of railways they are in.",
            "output": [
                "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID"
            ]
        },
        {
            "input": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
            "output": [
                "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"
            ]
        },
        {
            "input": "Sort all captain names by their ages from old to young.",
            "output": [
                "SELECT name FROM captain ORDER BY age DESC"
            ]
        },
        {
            "input": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
            "output": [
                "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1"
            ]
        },
        {
            "input": "Give the names and scores of wines made from white grapes.",
            "output": [
                "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\""
            ]
        },
        {
            "input": "What are the different states that have students trying out?",
            "output": [
                "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName"
            ]
        },
        {
            "input": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
            "output": [
                "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
            ]
        },
        {
            "input": "What is the name of the school with smallest enrollment size per state?",
            "output": [
                "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state"
            ]
        },
        {
            "input": "Show all the Store_Name of drama workshop groups.",
            "output": [
                "SELECT Store_Name FROM Drama_Workshop_Groups"
            ]
        },
        {
            "input": "For each branch id, what are the names of the branches that were registered after 2015?",
            "output": [
                "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id"
            ]
        },
        {
            "input": "Which cities have at least one customer but no performer?",
            "output": [
                "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID"
            ]
        },
        {
            "input": "List all company names with a book published by Alyson.",
            "output": [
                "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'"
            ]
        },
        {
            "input": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
            "output": [
                "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\""
            ]
        },
        {
            "input": "What is the total number of purchases for members with level 6?",
            "output": [
                "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
            ]
        },
        {
            "input": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?",
            "output": [
                "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
            ]
        },
        {
            "input": "Select the name of the products with a price less than or equal to $200.",
            "output": [
                "SELECT name FROM products WHERE price  <=  200"
            ]
        },
        {
            "input": "Show the movie titles and book titles for all companies in China.",
            "output": [
                "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'"
            ]
        },
        {
            "input": "Find the name of the swimmer who has the most records.",
            "output": [
                "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names of companies that do not make DVD drives?",
            "output": [
                "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'"
            ]
        },
        {
            "input": "How many different colleges are there?",
            "output": [
                "SELECT count(*) FROM College"
            ]
        },
        {
            "input": "Find the number of customers who live in the city called Lake Geovannyton.",
            "output": [
                "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\""
            ]
        },
        {
            "input": "What are the product names with average product price smaller than 1000000?",
            "output": [
                "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000"
            ]
        },
        {
            "input": "How many colors are there?",
            "output": [
                "SELECT count(*) FROM ref_colors"
            ]
        },
        {
            "input": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
            "output": [
                "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
            ]
        },
        {
            "input": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?",
            "output": [
                "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR"
            ]
        },
        {
            "input": "Find the names of customers who ordered both products Latte and Americano.",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'"
            ]
        },
        {
            "input": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
            "output": [
                "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC"
            ]
        },
        {
            "input": "For each dorm, how many amenities does it have?",
            "output": [
                "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid"
            ]
        },
        {
            "input": "What are the names and buying prices of all the products?",
            "output": [
                "SELECT product_name ,  typical_buying_price FROM products"
            ]
        },
        {
            "input": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
            "output": [
                "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
            ]
        },
        {
            "input": "Which workshop groups have bookings with status code \"stop\"? Give me the names.",
            "output": [
                "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\""
            ]
        },
        {
            "input": "Count the number of customers recorded.",
            "output": [
                "SELECT count(*) FROM CUSTOMERS"
            ]
        },
        {
            "input": "Give the names, details, and data types of characteristics that are not found in any product.",
            "output": [
                "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id"
            ]
        },
        {
            "input": "What is the name of the stadium which held the most events?",
            "output": [
                "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the number of products for each manufacturer, showing the name of each company.",
            "output": [
                "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"
            ]
        },
        {
            "input": "What are the names of products with price at most 200?",
            "output": [
                "SELECT name FROM products WHERE price  <=  200"
            ]
        },
        {
            "input": "How many countries do not have an roller coaster longer than 3000?",
            "output": [
                "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )"
            ]
        },
        {
            "input": "List the email addresses of the drama workshop groups located in Alaska state.",
            "output": [
                "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\""
            ]
        },
        {
            "input": "Show the name of the customer who has the most orders.",
            "output": [
                "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the different states that had students successfully try out?",
            "output": [
                "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "What are the names of the drama workshop groups with address in Feliciaberg city?",
            "output": [
                "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\""
            ]
        },
        {
            "input": "What is the average number of hours spent practicing for students who got rejected?",
            "output": [
                "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'"
            ]
        },
        {
            "input": "Count the number of characteristics of the 'flax' product.",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\""
            ]
        },
        {
            "input": "What are the names of manufacturers with revenue greater than the average of all revenues?",
            "output": [
                "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)"
            ]
        },
        {
            "input": "Find the name and revenue of the company that earns the highest revenue in each city.",
            "output": [
                "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter"
            ]
        },
        {
            "input": "Find the order detail for the products with price above 2000.",
            "output": [
                "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000"
            ]
        },
        {
            "input": "How many schools have students playing in goalie and mid-field positions?",
            "output": [
                "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')"
            ]
        },
        {
            "input": "How many movie directors are there?",
            "output": [
                "SELECT COUNT (DISTINCT director) FROM movie"
            ]
        },
        {
            "input": "How many different products are produced in each headquarter city?",
            "output": [
                "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter"
            ]
        },
        {
            "input": "How many colors are never used by any product?",
            "output": [
                "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )"
            ]
        },
        {
            "input": "Find the name of players whose card is yes in the descending order of training hours.",
            "output": [
                "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC"
            ]
        },
        {
            "input": "List the wheels and locations of the railways.",
            "output": [
                "SELECT Wheels ,  LOCATION FROM railway"
            ]
        },
        {
            "input": "Show all book categories and the number of books in each category.",
            "output": [
                "SELECT category ,  count(*) FROM book_club GROUP BY category"
            ]
        },
        {
            "input": "Count the number of products.",
            "output": [
                "SELECT count(*) FROM products"
            ]
        },
        {
            "input": "Find the number of dorms that have some amenity.",
            "output": [
                "SELECT count(DISTINCT dormid) FROM has_amenity"
            ]
        },
        {
            "input": "How many female students live in Smith Hall?",
            "output": [
                "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'"
            ]
        },
        {
            "input": "List all the event names by year from the most recent to the oldest.",
            "output": [
                "SELECT name FROM event ORDER BY YEAR DESC"
            ]
        },
        {
            "input": "How many girl students who are younger than 25?",
            "output": [
                "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"
            ]
        },
        {
            "input": "What are the different membership levels?",
            "output": [
                "SELECT count(DISTINCT LEVEL) FROM member"
            ]
        },
        {
            "input": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
            "output": [
                "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?",
            "output": [
                "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""
            ]
        },
        {
            "input": "What is the document status description of the document with id 1?",
            "output": [
                "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1"
            ]
        },
        {
            "input": "What is the name of the shipping agent of the document with id 2?",
            "output": [
                "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2"
            ]
        },
        {
            "input": "Find distinct cities of addresses of people?",
            "output": [
                "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
            ]
        },
        {
            "input": "List name, dates active, and number of deaths for all storms with at least 1 death.",
            "output": [
                "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1"
            ]
        },
        {
            "input": "Find id of the candidate who most recently accessed the course?",
            "output": [
                "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
            "output": [
                "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
            ]
        },
        {
            "input": "How many customers have an account?",
            "output": [
                "SELECT count(DISTINCT customer_id) FROM Accounts"
            ]
        },
        {
            "input": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
            "output": [
                "SELECT name ,  dept_name FROM student ORDER BY tot_cred"
            ]
        },
        {
            "input": "Find the name of the department that offers the highest total credits?",
            "output": [
                "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
            ]
        },
        {
            "input": "Count the number of customers who hold an account.",
            "output": [
                "SELECT count(DISTINCT customer_id) FROM Accounts"
            ]
        },
        {
            "input": "What are the different cities where people live?",
            "output": [
                "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
            ]
        },
        {
            "input": "Find the maximum and minimum millisecond lengths of pop tracks.",
            "output": [
                "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
            ]
        },
        {
            "input": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
            "output": [
                "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id"
            ]
        },
        {
            "input": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
            "output": [
                "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"
            ]
        },
        {
            "input": "What are the coupon amount of the coupons owned by both good and bad customers?",
            "output": [
                "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'"
            ]
        },
        {
            "input": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
            "output": [
                "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
            ]
        },
        {
            "input": "What are the different names of all the races in reverse alphabetical order?",
            "output": [
                "SELECT DISTINCT name FROM races ORDER BY name DESC"
            ]
        },
        {
            "input": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
            "output": [
                "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
            ]
        },
        {
            "input": "Find the average millisecond length of Latin and Pop tracks.",
            "output": [
                "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""
            ]
        },
        {
            "input": "What are the ids of the students who registered for course 301?",
            "output": [
                "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"
            ]
        },
        {
            "input": "Show names of musicals and the number of actors who have appeared in the musicals.",
            "output": [
                "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
            ]
        },
        {
            "input": "what are the first name and last name of all candidates?",
            "output": [
                "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
            ]
        },
        {
            "input": "What is the id and last name of the driver with the longest laptime?",
            "output": [
                "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the id and name of the browser that is compatible with the most web accelerators?",
            "output": [
                "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the schools that were either founded before 1850 or are public?",
            "output": [
                "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
            ]
        },
        {
            "input": "Find the distinct names of all races held between 2014 and 2017?",
            "output": [
                "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"
            ]
        },
        {
            "input": "How many climbers are there?",
            "output": [
                "SELECT count(*) FROM climber"
            ]
        },
        {
            "input": "What are the different first names for customers from Brazil who have also had an invoice?",
            "output": [
                "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""
            ]
        },
        {
            "input": "Which cmi cross reference id is not related to any parking taxes?",
            "output": [
                "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines"
            ]
        },
        {
            "input": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
            "output": [
                "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000"
            ]
        },
        {
            "input": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
            "output": [
                "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
            ]
        },
        {
            "input": "Return the name of the heaviest entrepreneur.",
            "output": [
                "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
            ]
        },
        {
            "input": "Show names of actors and names of musicals they are in.",
            "output": [
                "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"
            ]
        },
        {
            "input": "Count the number of different affected regions.",
            "output": [
                "SELECT count(DISTINCT region_id) FROM affected_region"
            ]
        },
        {
            "input": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
            "output": [
                "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title"
            ]
        },
        {
            "input": "What are the weights of entrepreneurs in descending order of money requested?",
            "output": [
                "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"
            ]
        },
        {
            "input": "What is the product description of the product booked with an amount of 102.76?",
            "output": [
                "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76"
            ]
        },
        {
            "input": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
            "output": [
                "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'"
            ]
        },
        {
            "input": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?",
            "output": [
                "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
            ]
        },
        {
            "input": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
            "output": [
                "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
            ]
        },
        {
            "input": "Show the enrollment and primary_conference of the oldest college.",
            "output": [
                "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1"
            ]
        },
        {
            "input": "How many tracks belong to rock genre?",
            "output": [
                "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
            ]
        },
        {
            "input": "What are the names of instructors who didn't teach?",
            "output": [
                "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
            ]
        },
        {
            "input": "What are all info of students who registered courses but not attended courses?",
            "output": [
                "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
            ]
        },
        {
            "input": "What are the numbers of races for each constructor id?",
            "output": [
                "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid"
            ]
        },
        {
            "input": "What are the unique names of all race held between 2014 and 2017?",
            "output": [
                "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"
            ]
        },
        {
            "input": "For each nationality, how many different constructors are there?",
            "output": [
                "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality"
            ]
        },
        {
            "input": "What is the name of the race that occurred most recently?",
            "output": [
                "SELECT name FROM races ORDER BY date DESC LIMIT 1"
            ]
        },
        {
            "input": "Which student visited restaurant most often? List student's first name and last name.",
            "output": [
                "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
            "output": [
                "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F'"
            ]
        },
        {
            "input": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
            "output": [
                "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'"
            ]
        },
        {
            "input": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
            "output": [
                "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"
            ]
        },
        {
            "input": "List the distinct carriers of phones with memories bigger than 32.",
            "output": [
                "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32"
            ]
        },
        {
            "input": "Find courses that ran in Fall 2009 and in Spring 2010.",
            "output": [
                "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "What is the role of the employee named Koby?",
            "output": [
                "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\""
            ]
        },
        {
            "input": "Return the investor who have invested in the greatest number of entrepreneurs.",
            "output": [
                "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
            "output": [
                "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "How many drivers were in the Australian Grand Prix held in 2009?",
            "output": [
                "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"
            ]
        },
        {
            "input": "What is the storm name and max speed which affected the greatest number of regions?",
            "output": [
                "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the party of the youngest people?",
            "output": [
                "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"
            ]
        },
        {
            "input": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
            "output": [
                "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC"
            ]
        },
        {
            "input": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
            "output": [
                "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\""
            ]
        },
        {
            "input": "List the names of people that have not been on the affirmative side of debates.",
            "output": [
                "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)"
            ]
        },
        {
            "input": "Return the average transaction amount, as well as the total amount of all transactions.",
            "output": [
                "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"
            ]
        },
        {
            "input": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
            "output": [
                "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
            ]
        },
        {
            "input": "Find the name of department has the highest amount of students?",
            "output": [
                "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
            "output": [
                "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC"
            ]
        },
        {
            "input": "What are the different cities where students live?",
            "output": [
                "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
            ]
        },
        {
            "input": "How many customers do not have an account?",
            "output": [
                "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
            ]
        },
        {
            "input": "Find the total number of students in each department.",
            "output": [
                "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
            ]
        },
        {
            "input": "Find the address of all customers that live in Germany and have invoice.",
            "output": [
                "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
            ]
        },
        {
            "input": "Find the names of all races held in 2017.",
            "output": [
                "SELECT name FROM races WHERE YEAR = 2017"
            ]
        },
        {
            "input": "List the name of browsers in descending order by market share.",
            "output": [
                "SELECT name FROM browser ORDER BY market_share DESC"
            ]
        },
        {
            "input": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
            "output": [
                "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"
            ]
        },
        {
            "input": "What is the name of the perpetrator with the biggest weight.",
            "output": [
                "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the ids and first names of customers who do not hold a credit card?",
            "output": [
                "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\""
            ]
        },
        {
            "input": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
            "output": [
                "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
            ]
        },
        {
            "input": "What are the ids of instructors who didnt' teach?",
            "output": [
                "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
            ]
        },
        {
            "input": "Find the title, credit, and department name of courses that have more than one prerequisites?",
            "output": [
                "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
            ]
        },
        {
            "input": "What is the weight of the shortest person?",
            "output": [
                "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"
            ]
        },
        {
            "input": "What are the ids and full names of customers who hold two or more cards?",
            "output": [
                "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "Give the title of the course offered in Chandler during the Fall of 2010.",
            "output": [
                "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"
            ]
        },
        {
            "input": "How many technicians are there?",
            "output": [
                "SELECT count(*) FROM technician"
            ]
        },
        {
            "input": "How many students and instructors are in each department?",
            "output": [
                "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"
            ]
        },
        {
            "input": "Which membership card has more than 5 members?",
            "output": [
                "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
            ]
        },
        {
            "input": "Find the name of instructors who are advising more than one student.",
            "output": [
                "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
            ]
        },
        {
            "input": "What is the title, credit value, and department name for courses with more than one prerequisite?",
            "output": [
                "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
            ]
        },
        {
            "input": "What is draft detail of the document with id 7?",
            "output": [
                "SELECT draft_details FROM Document_Drafts WHERE document_id = 7"
            ]
        },
        {
            "input": "Find the name of students who took any class in the years of 2009 and 2010.",
            "output": [
                "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"
            ]
        },
        {
            "input": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
            "output": [
                "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
            ]
        },
        {
            "input": "Who are the nominees who have been nominated more than two times?",
            "output": [
                "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
            ]
        },
        {
            "input": "What are the names of countains that no climber has climbed?",
            "output": [
                "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"
            ]
        },
        {
            "input": "Given the titles of all courses, in order of titles and credits.",
            "output": [
                "SELECT title FROM course ORDER BY title ,  credits"
            ]
        },
        {
            "input": "Count the number of actors.",
            "output": [
                "SELECT count(*) FROM actor"
            ]
        },
        {
            "input": "list in alphabetic order all course names and their instructors' names in year 2008.",
            "output": [
                "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title"
            ]
        },
        {
            "input": "Count the number of tracks.",
            "output": [
                "SELECT count(*) FROM track"
            ]
        },
        {
            "input": "Find the name of students who took some course offered by Statistics department.",
            "output": [
                "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
            ]
        },
        {
            "input": "What is the id of the candidate whose email is stanley.monahan@example.org?",
            "output": [
                "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
            ]
        },
        {
            "input": "Find the names of instructors who didn't each any courses in any Spring semester.",
            "output": [
                "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"
            ]
        },
        {
            "input": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
            "output": [
                "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC"
            ]
        },
        {
            "input": "Show the name and date for each race and its track name.",
            "output": [
                "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id"
            ]
        },
        {
            "input": "What are the names of instructors who have taught C Programming courses?",
            "output": [
                "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"
            ]
        },
        {
            "input": "Show storm name with at least two regions and 10 cities affected.",
            "output": [
                "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
            ]
        },
        {
            "input": "What are the characters of actors in descending order of age?",
            "output": [
                "SELECT Character FROM actor ORDER BY age DESC"
            ]
        },
        {
            "input": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
            "output": [
                "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
            ]
        },
        {
            "input": "How many drivers participated in the race Australian Grand Prix held in 2009?",
            "output": [
                "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"
            ]
        },
        {
            "input": "What is the name of the entrepreneur with the greatest weight?",
            "output": [
                "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
            ]
        },
        {
            "input": "Return the primary conference of the school with the lowest acc percentage score.",
            "output": [
                "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
            ]
        },
        {
            "input": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
            "output": [
                "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id"
            ]
        },
        {
            "input": "What are the first and last names of all the candidates?",
            "output": [
                "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
            ]
        },
        {
            "input": "Find id of the candidate whose email is stanley.monahan@example.org?",
            "output": [
                "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
            ]
        },
        {
            "input": "What are the full names of customers who have accounts?",
            "output": [
                "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
            ]
        },
        {
            "input": "Give the name of the lowest earning instructor in the Statistics department.",
            "output": [
                "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
            ]
        },
        {
            "input": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
            "output": [
                "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"
            ]
        },
        {
            "input": "What is the title of the prerequisite class of International Finance course?",
            "output": [
                "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"
            ]
        },
        {
            "input": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
            "output": [
                "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\""
            ]
        },
        {
            "input": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
            "output": [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
            ]
        },
        {
            "input": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
            "output": [
                "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1"
            ]
        },
        {
            "input": "How many students are attending English courses?",
            "output": [
                "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
            ]
        },
        {
            "input": "Hom many albums does the artist \"Metallica\" have?",
            "output": [
                "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""
            ]
        },
        {
            "input": "How many different source system code for the cmi cross references are there?",
            "output": [
                "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references"
            ]
        },
        {
            "input": "Which year had the greatest number of courses?",
            "output": [
                "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "How many medicines are offered by each trade name?",
            "output": [
                "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name"
            ]
        },
        {
            "input": "Find the semester and year which has the least number of student taking any class.",
            "output": [
                "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "What are the names and budgets of departments with budgets greater than the average?",
            "output": [
                "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
            ]
        },
        {
            "input": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
            "output": [
                "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "What is the team name and acc regular season score of the school that was founded for the longest time?",
            "output": [
                "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
            ]
        },
        {
            "input": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
            "output": [
                "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
            ]
        },
        {
            "input": "How many students have advisors?",
            "output": [
                "SELECT count(DISTINCT s_id) FROM advisor"
            ]
        },
        {
            "input": "Find the id of courses which are registered or attended by student whose id is 121?",
            "output": [
                "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
            ]
        },
        {
            "input": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
            "output": [
                "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "What are the names of all the races that occurred in the year 2017?",
            "output": [
                "SELECT name FROM races WHERE YEAR = 2017"
            ]
        },
        {
            "input": "What are the names of instructors who advise more than one student?",
            "output": [
                "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
            ]
        },
        {
            "input": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
            "output": [
                "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
            ]
        },
        {
            "input": "Count the number of parties.",
            "output": [
                "SELECT count(*) FROM party"
            ]
        },
        {
            "input": "what is id of students who registered some courses but the least number of courses in these students?",
            "output": [
                "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "Please show the employee first names and ids of employees who serve at least 10 customers.",
            "output": [
                "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
            ]
        },
        {
            "input": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
            "output": [
                "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"
            ]
        },
        {
            "input": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
            "output": [
                "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"
            ]
        },
        {
            "input": "which course has most number of registered students?",
            "output": [
                "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the account ids, customer ids, and account names for all the accounts?",
            "output": [
                "SELECT account_id ,  customer_id ,  account_name FROM Accounts"
            ]
        },
        {
            "input": "How many debates are there?",
            "output": [
                "SELECT count(*) FROM debate"
            ]
        },
        {
            "input": "How many distinct kinds of injuries happened after season 2010?",
            "output": [
                "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010"
            ]
        },
        {
            "input": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
            "output": [
                "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
            "output": [
                "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"
            ]
        },
        {
            "input": "How many restaurant is the Sandwich type restaurant?",
            "output": [
                "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"
            ]
        },
        {
            "input": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
            "output": [
                "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000"
            ]
        },
        {
            "input": "For each constructor id, how many races are there?",
            "output": [
                "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid"
            ]
        },
        {
            "input": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
            "output": [
                "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
            "output": [
                "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "What are the different names of mountains ascended by climbers from the country of West Germany?",
            "output": [
                "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
            ]
        },
        {
            "input": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
            "output": [
                "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
            ]
        },
        {
            "input": "How many cards does customer Art Turcotte have?",
            "output": [
                "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
            ]
        },
        {
            "input": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
            "output": [
                "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"
            ]
        },
        {
            "input": "What is the sum of budgets of the Marketing and Finance departments?",
            "output": [
                "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"
            ]
        },
        {
            "input": "When did Linda Smith visit Subway?",
            "output": [
                "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\""
            ]
        },
        {
            "input": "What is the average unit price of rock tracks?",
            "output": [
                "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
            ]
        },
        {
            "input": "What are the ids and names of the medicine that can interact with two or more enzymes?",
            "output": [
                "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "How many actors have appeared in each musical?",
            "output": [
                "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
            ]
        },
        {
            "input": "What are the titles for courses with two prerequisites?",
            "output": [
                "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2"
            ]
        },
        {
            "input": "What are the names and dates of races, and the names of the tracks where they are held?",
            "output": [
                "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id"
            ]
        },
        {
            "input": "How many accounts does the customer with first name Art and last name Turcotte have?",
            "output": [
                "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
            ]
        },
        {
            "input": "What are the id of students who registered courses or attended courses?",
            "output": [
                "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
            ]
        },
        {
            "input": "How many customer cards are there?",
            "output": [
                "SELECT count(*) FROM Customers_cards"
            ]
        },
        {
            "input": "List the id of students who registered course statistics in the order of registration date.",
            "output": [
                "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
            ]
        },
        {
            "input": "What are the ids of the students who registered for course 301 most recently?",
            "output": [
                "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the name and date of the race that occurred most recently?",
            "output": [
                "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
            ]
        },
        {
            "input": "List all students' first names and last names who majored in 600.",
            "output": [
                "SELECT Fname , Lname FROM Student WHERE Major  =  600"
            ]
        },
        {
            "input": "What are the codes of card types that have 5 or more cards?",
            "output": [
                "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"
            ]
        },
        {
            "input": "What are the public schools and what are their locations?",
            "output": [
                "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'"
            ]
        },
        {
            "input": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
            "output": [
                "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1"
            ]
        },
        {
            "input": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
            "output": [
                "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
            ]
        },
        {
            "input": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
            "output": [
                "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
            "output": [
                "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'"
            ]
        },
        {
            "input": "What is the count of enzymes without any interactions?",
            "output": [
                "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )"
            ]
        },
        {
            "input": "What are the ids and locations of all circuits in France or Belgium?",
            "output": [
                "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
            ]
        },
        {
            "input": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
            "output": [
                "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
            ]
        },
        {
            "input": "What are the names of races held between 2009 and 2011?",
            "output": [
                "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
            ]
        },
        {
            "input": "Show the average and maximum damage for all storms with max speed higher than 1000.",
            "output": [
                "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000"
            ]
        },
        {
            "input": "What are the names of students who have taken the prerequisite for the course International Finance?",
            "output": [
                "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"
            ]
        },
        {
            "input": "How many medicines were not approved by the FDA?",
            "output": [
                "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'"
            ]
        },
        {
            "input": "What are the names of enzymes that include the string 'ALA'?",
            "output": [
                "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
            ]
        },
        {
            "input": "List the names of all distinct races in reversed  lexicographic order?",
            "output": [
                "SELECT DISTINCT name FROM races ORDER BY name DESC"
            ]
        },
        {
            "input": "What are the names of students who haven't taken any Biology courses?",
            "output": [
                "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
            ]
        },
        {
            "input": "For each course id, how many students are registered and what are the course names?",
            "output": [
                "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
            ]
        },
        {
            "input": "What are the first names of all the different drivers in alphabetical order?",
            "output": [
                "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"
            ]
        },
        {
            "input": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
            "output": [
                "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"
            ]
        },
        {
            "input": "List the names and buildings of all departments sorted by the budget from large to small.",
            "output": [
                "SELECT dept_name ,  building FROM department ORDER BY budget DESC"
            ]
        },
        {
            "input": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
            "output": [
                "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"
            ]
        },
        {
            "input": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
            "output": [
                "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""
            ]
        },
        {
            "input": "How many drivers did not participate in the races held in 2009?",
            "output": [
                "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
            ]
        },
        {
            "input": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
            "output": [
                "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'"
            ]
        },
        {
            "input": "Show the names of people and the number of times they have been on the affirmative side of debates.",
            "output": [
                "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name"
            ]
        },
        {
            "input": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
            "output": [
                "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
            ]
        },
        {
            "input": "What are the id of students who registered course 301?",
            "output": [
                "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"
            ]
        },
        {
            "input": "What are the duration of the longest and shortest pop tracks in milliseconds?",
            "output": [
                "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
            ]
        },
        {
            "input": "How many actors are there?",
            "output": [
                "SELECT count(*) FROM actor"
            ]
        },
        {
            "input": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
            "output": [
                "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\""
            ]
        },
        {
            "input": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
            "output": [
                "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""
            ]
        },
        {
            "input": "Return the investors who have invested in two or more entrepreneurs.",
            "output": [
                "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "Show distinct first and last names for all customers with an account.",
            "output": [
                "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
            ]
        },
        {
            "input": "Find all the customer information in state NY.",
            "output": [
                "SELECT * FROM CUSTOMER WHERE State  =  \"NY\""
            ]
        },
        {
            "input": "Show names of technicians and the number of machines they are assigned to repair.",
            "output": [
                "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
            ]
        },
        {
            "input": "What are the first names and support rep ids for employees serving 10 or more customers?",
            "output": [
                "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
            ]
        },
        {
            "input": "What are the durations of the longest and the shortest tracks in milliseconds?",
            "output": [
                "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
            ]
        },
        {
            "input": "What are the names of entrepreneurs?",
            "output": [
                "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
            ]
        },
        {
            "input": "How many tracks do we have?",
            "output": [
                "SELECT count(*) FROM track"
            ]
        },
        {
            "input": "What are the last names of customers without invoice totals exceeding 20?",
            "output": [
                "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20"
            ]
        },
        {
            "input": "Find the name of instructors who didn't teach any courses?",
            "output": [
                "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
            ]
        },
        {
            "input": "What are the names of students who have taken Statistics courses?",
            "output": [
                "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
            ]
        },
        {
            "input": "Return the name and max speed of the storm that affected the most regions.",
            "output": [
                "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the investors that have invested in at least two entrepreneurs?",
            "output": [
                "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
            "output": [
                "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'"
            ]
        },
        {
            "input": "What is the name of the race held most recently?",
            "output": [
                "SELECT name FROM races ORDER BY date DESC LIMIT 1"
            ]
        },
        {
            "input": "Find id of candidates whose assessment code is \"Pass\"?",
            "output": [
                "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
            ]
        },
        {
            "input": "What are the different card types, and how many transactions have been made with each?",
            "output": [
                "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
            ]
        },
        {
            "input": "Find the id of the courses that do not have any prerequisite?",
            "output": [
                "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
            ]
        },
        {
            "input": "Show all storm names except for those with at least two affected regions.",
            "output": [
                "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "How many students are in each department?",
            "output": [
                "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
            ]
        },
        {
            "input": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
            "output": [
                "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
            "output": [
                "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000"
            ]
        },
        {
            "input": "What is the course title of the prerequisite of course Mobile Computing?",
            "output": [
                "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"
            ]
        },
        {
            "input": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
            "output": [
                "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
            ]
        },
        {
            "input": "What are the names and trade names of the medcines that are FDA approved?",
            "output": [
                "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'"
            ]
        },
        {
            "input": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
            "output": [
                "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"
            ]
        },
        {
            "input": "What is the starting year of the oldest technicians?",
            "output": [
                "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
            ]
        },
        {
            "input": "How many regions are affected?",
            "output": [
                "SELECT count(DISTINCT region_id) FROM affected_region"
            ]
        },
        {
            "input": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
            "output": [
                "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id"
            ]
        },
        {
            "input": "Show the name for regions and the number of storms for each region.",
            "output": [
                "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
            ]
        },
        {
            "input": "Find the names of artists that do not have any albums.",
            "output": [
                "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId"
            ]
        },
        {
            "input": "What is the shipping agent code of shipping agent UPS?",
            "output": [
                "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\""
            ]
        },
        {
            "input": "What are the forename and surname of the driver who has the smallest laptime?",
            "output": [
                "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
            ]
        },
        {
            "input": "What are the names and locations of tracks that have had exactly 1 race?",
            "output": [
                "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"
            ]
        },
        {
            "input": "List the name and residence for players whose occupation is not \"Researcher\".",
            "output": [
                "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\""
            ]
        },
        {
            "input": "What are the id and name of the stadium where the most injury accidents happened?",
            "output": [
                "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "How many storms occured in each region?",
            "output": [
                "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
            ]
        },
        {
            "input": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
            "output": [
                "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'"
            ]
        },
        {
            "input": "Find the founded year of the newest non public school.",
            "output": [
                "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
            ]
        },
        {
            "input": "How many employees does each role have? List role description, id and number of employees.",
            "output": [
                "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code"
            ]
        },
        {
            "input": "What is the location of the perpetrator with the largest kills.",
            "output": [
                "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1"
            ]
        },
        {
            "input": "Count the number of students who have advisors.",
            "output": [
                "SELECT count(DISTINCT s_id) FROM advisor"
            ]
        },
        {
            "input": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
            "output": [
                "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"
            ]
        },
        {
            "input": "Give id of the instructor who advises students in the History department.",
            "output": [
                "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
            ]
        },
        {
            "input": "Show names for all regions except for Denmark.",
            "output": [
                "SELECT region_name FROM region WHERE region_name != 'Denmark'"
            ]
        },
        {
            "input": "Which parties have more than 20 hosts? Give me the host names for these parties.",
            "output": [
                "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20"
            ]
        },
        {
            "input": "List all public schools and their locations.",
            "output": [
                "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'"
            ]
        },
        {
            "input": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
            "output": [
                "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""
            ]
        },
        {
            "input": "Advisor 1121 has how many students?",
            "output": [
                "SELECT count(*) FROM Student WHERE Advisor =  1121"
            ]
        },
        {
            "input": "What are the heights of perpetrators in descending order of the number of people they injured?",
            "output": [
                "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC"
            ]
        },
        {
            "input": "What are the ids of courses without prerequisites?",
            "output": [
                "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
            ]
        },
        {
            "input": "How many universities have a location that contains NY?",
            "output": [
                "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
            ]
        },
        {
            "input": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
            "output": [
                "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"
            ]
        },
        {
            "input": "How many times has the student Linda Smith visited Subway?",
            "output": [
                "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\""
            ]
        },
        {
            "input": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
            "output": [
                "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
            ]
        },
        {
            "input": "Show all card type codes and the number of customers holding cards in each type.",
            "output": [
                "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
            ]
        },
        {
            "input": "What is the customer id, first and last name with least number of accounts.",
            "output": [
                "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
            ]
        },
        {
            "input": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
            "output": [
                "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\""
            ]
        },
        {
            "input": "What are the names of all races held after 2000 in Spain?",
            "output": [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
            ]
        },
        {
            "input": "Return the characters for actors, ordered by age descending.",
            "output": [
                "SELECT Character FROM actor ORDER BY age DESC"
            ]
        },
        {
            "input": "What are the names of musicals who have no actors?",
            "output": [
                "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
            ]
        },
        {
            "input": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
            "output": [
                "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
            ]
        },
        {
            "input": "What are the names of instructors who didn't teach courses in the Spring?",
            "output": [
                "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"
            ]
        },
        {
            "input": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
            "output": [
                "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'"
            ]
        },
        {
            "input": "What are the names of actors who are not 20 years old?",
            "output": [
                "SELECT Name FROM actor WHERE Age != 20"
            ]
        },
        {
            "input": "What is the title of the course that is a prerequisite for Mobile Computing?",
            "output": [
                "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"
            ]
        },
        {
            "input": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
            "output": [
                "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"
            ]
        },
        {
            "input": "Show the number of customer cards.",
            "output": [
                "SELECT count(*) FROM Customers_cards"
            ]
        },
        {
            "input": "List the id of students who registered some courses and the number of their registered courses?",
            "output": [
                "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
            ]
        },
        {
            "input": "What are the names of the storms that affected Denmark?",
            "output": [
                "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"
            ]
        },
        {
            "input": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
            "output": [
                "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
            ]
        },
        {
            "input": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
            "output": [
                "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id"
            ]
        },
        {
            "input": "Return the code of the card type that is most common.",
            "output": [
                "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "How many draft copies does the document with id 2 have?",
            "output": [
                "SELECT count(*) FROM Draft_Copies WHERE document_id = 2"
            ]
        },
        {
            "input": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
            "output": [
                "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'"
            ]
        },
        {
            "input": "Count the number of rooms in Lamberton with capacity lower than 50.",
            "output": [
                "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50"
            ]
        },
        {
            "input": "Find courses that ran in Fall 2009 or in Spring 2010.",
            "output": [
                "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "How many courses are provided in each semester and year?",
            "output": [
                "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
            ]
        },
        {
            "input": "What are the names of musicals with nominee \"Bob Fosse\"?",
            "output": [
                "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\""
            ]
        },
        {
            "input": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
            "output": [
                "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "What is the id and family name of the driver who has the longest laptime?",
            "output": [
                "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the region names affected by the storm with a number of deaths of least 10?",
            "output": [
                "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10"
            ]
        },
        {
            "input": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
            "output": [
                "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the name and location of track with 1 race.",
            "output": [
                "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"
            ]
        },
        {
            "input": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
            "output": [
                "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"
            ]
        },
        {
            "input": "Which semeseter and year had the fewest students?",
            "output": [
                "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "What are the times used by climbers who climbed mountains in the country of Uganda?",
            "output": [
                "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""
            ]
        },
        {
            "input": "How many employees do we have?",
            "output": [
                "SELECT count(*) FROM Employees"
            ]
        },
        {
            "input": "Find the name and salary of instructors who are advisors of the students from the Math department.",
            "output": [
                "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"
            ]
        },
        {
            "input": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
            "output": [
                "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
            ]
        },
        {
            "input": "How many different kinds of clients are supported by the web clients accelerators?",
            "output": [
                "SELECT count(DISTINCT client) FROM web_client_accelerator"
            ]
        },
        {
            "input": "Find the average unit price of jazz tracks.",
            "output": [
                "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
            ]
        },
        {
            "input": "Give the title of the prerequisite to the course International Finance.",
            "output": [
                "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"
            ]
        },
        {
            "input": "List the forenames of all distinct drivers in alphabetical order?",
            "output": [
                "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"
            ]
        },
        {
            "input": "What are the names of all instructors in the Comp. Sci. department?",
            "output": [
                "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"
            ]
        },
        {
            "input": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
            "output": [
                "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
            ]
        },
        {
            "input": "List the council tax ids and their related cmi cross references of all the parking fines.",
            "output": [
                "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines"
            ]
        },
        {
            "input": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
            "output": [
                "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"
            ]
        },
        {
            "input": "Which parties have hosts of age above 50? Give me the party locations.",
            "output": [
                "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"
            ]
        },
        {
            "input": "For every student who is registered for some course, how many courses are they registered for?",
            "output": [
                "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
            ]
        },
        {
            "input": "What is the duration of the oldest actor?",
            "output": [
                "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
            ]
        },
        {
            "input": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
            "output": [
                "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50"
            ]
        },
        {
            "input": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
            "output": [
                "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
            ]
        },
        {
            "input": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
            "output": [
                "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase"
            ]
        },
        {
            "input": "What are all the different first names of the drivers who are in position as standing and won?",
            "output": [
                "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1"
            ]
        },
        {
            "input": "Show ids, customer ids, card type codes, card numbers for all cards.",
            "output": [
                "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards"
            ]
        },
        {
            "input": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
            "output": [
                "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"
            ]
        },
        {
            "input": "Show the card type codes and the number of transactions.",
            "output": [
                "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
            ]
        },
        {
            "input": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
            "output": [
                "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
            ]
        },
        {
            "input": "Find the names of students who have taken any course in the fall semester of year 2003.",
            "output": [
                "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"
            ]
        },
        {
            "input": "How many games are free of injury accidents?",
            "output": [
                "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )"
            ]
        },
        {
            "input": "How many council taxes are collected for renting arrears ?",
            "output": [
                "SELECT count(*) FROM rent_arrears"
            ]
        },
        {
            "input": "Show the date of the tallest perpetrator.",
            "output": [
                "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the total number of students and total number of instructors for each department.",
            "output": [
                "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"
            ]
        },
        {
            "input": "Find the name and salary of the instructors who are advisors of any student from History department?",
            "output": [
                "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
            ]
        },
        {
            "input": "List the number of people injured by perpetrators in ascending order.",
            "output": [
                "SELECT Injured FROM perpetrator ORDER BY Injured ASC"
            ]
        },
        {
            "input": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
            "output": [
                "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'"
            ]
        },
        {
            "input": "Which nations have both hosts of age above 45 and hosts of age below 35?",
            "output": [
                "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"
            ]
        },
        {
            "input": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
            "output": [
                "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'"
            ]
        },
        {
            "input": "Find the schools that were either founded after 1850 or public.",
            "output": [
                "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
            ]
        },
        {
            "input": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
            "output": [
                "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested"
            ]
        },
        {
            "input": "Show the names of people who have been on the negative side of debates at least twice.",
            "output": [
                "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
            "output": [
                "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"
            ]
        },
        {
            "input": "What are the different card type codes, and how many different customers hold each type?",
            "output": [
                "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
            ]
        },
        {
            "input": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
            "output": [
                "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
            ]
        },
        {
            "input": "What is the investor that has invested in the most number of entrepreneurs?",
            "output": [
                "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
            "output": [
                "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'"
            ]
        },
        {
            "input": "What is the total count of enzymes?",
            "output": [
                "SELECT count(*) FROM enzyme"
            ]
        },
        {
            "input": "Find the cities corresponding to employees who help customers with the postal code 70174.",
            "output": [
                "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\""
            ]
        },
        {
            "input": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
            "output": [
                "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"
            ]
        },
        {
            "input": "Find the id and surname of the driver who participated the most number of races?",
            "output": [
                "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
            "output": [
                "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"
            ]
        },
        {
            "input": "What are the names of musicals who have at 3 or more actors?",
            "output": [
                "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
            ]
        },
        {
            "input": "How many kinds of enzymes are there?",
            "output": [
                "SELECT count(*) FROM enzyme"
            ]
        },
        {
            "input": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
            "output": [
                "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
            ]
        },
        {
            "input": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
            "output": [
                "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "What is the forename and surname of the driver with the shortest laptime?",
            "output": [
                "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
            ]
        },
        {
            "input": "Show names of musicals which have at least three actors.",
            "output": [
                "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
            ]
        },
        {
            "input": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
            "output": [
                "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)"
            ]
        },
        {
            "input": "Return the names of entrepreneurs.",
            "output": [
                "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
            ]
        },
        {
            "input": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
            "output": [
                "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
            ]
        },
        {
            "input": "Show ids, customer ids, names for all accounts.",
            "output": [
                "SELECT account_id ,  customer_id ,  account_name FROM Accounts"
            ]
        },
        {
            "input": "What is the founded year of the non public school that was founded most recently?",
            "output": [
                "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
            ]
        },
        {
            "input": "List the dates of games by the home team name in descending order.",
            "output": [
                "SELECT Date FROM game ORDER BY home_team DESC"
            ]
        },
        {
            "input": "What are the names of the technicians  and how many machines are they assigned to repair?",
            "output": [
                "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
            ]
        },
        {
            "input": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
            "output": [
                "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Return the weight of the shortest person.",
            "output": [
                "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"
            ]
        },
        {
            "input": "How many credit cards does customer Blanche Huels have?",
            "output": [
                "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""
            ]
        },
        {
            "input": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
            "output": [
                "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name"
            ]
        },
        {
            "input": "How many accelerators are not compatible with the browsers listed ?",
            "output": [
                "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser )"
            ]
        },
        {
            "input": "What are the ids of the students who registered course statistics by order of registration date?",
            "output": [
                "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
            ]
        },
        {
            "input": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
            "output": [
                "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"
            ]
        },
        {
            "input": "What are the names of the races held after 2017 in Spain?",
            "output": [
                "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
            ]
        },
        {
            "input": "What is the mail date of the document with id 7?",
            "output": [
                "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7"
            ]
        },
        {
            "input": "List the names of entrepreneurs and their companies in descending order of money requested?",
            "output": [
                "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested"
            ]
        },
        {
            "input": "What is the name of the deparment with the highest enrollment?",
            "output": [
                "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the name of the storm that affected both Afghanistan and Albania regions.",
            "output": [
                "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'"
            ]
        },
        {
            "input": "What is the average amount due for all the payments?",
            "output": [
                "SELECT avg(amount_due) FROM payments"
            ]
        },
        {
            "input": "List the venues of debates in ascending order of the number of audience.",
            "output": [
                "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC"
            ]
        },
        {
            "input": "Show the names of players coached by the rank 1 coach.",
            "output": [
                "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1"
            ]
        },
        {
            "input": "What are the addresses of customers living in Germany who have had an invoice?",
            "output": [
                "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
            ]
        },
        {
            "input": "What are the memories and carriers of phones?",
            "output": [
                "SELECT Memory_in_G ,  Carrier FROM phone"
            ]
        },
        {
            "input": "What are the names and salaries of instructors who advises students in the History department?",
            "output": [
                "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
            ]
        },
        {
            "input": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
            "output": [
                "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200"
            ]
        },
        {
            "input": "List the id of students who attended some courses?",
            "output": [
                "SELECT student_id FROM student_course_attendance"
            ]
        },
        {
            "input": "What are the last names of employees who serve at most 20 customers?",
            "output": [
                "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20"
            ]
        },
        {
            "input": "Return the names of all regions other than Denmark.",
            "output": [
                "SELECT region_name FROM region WHERE region_name != 'Denmark'"
            ]
        },
        {
            "input": "Are the customers holding coupons with amount 500 bad or good?",
            "output": [
                "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500"
            ]
        },
        {
            "input": "How many documents were shipped by USPS?",
            "output": [
                "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\""
            ]
        },
        {
            "input": "Find the year and semester when offers the largest number of courses.",
            "output": [
                "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the average number of people injured by all perpetrators?",
            "output": [
                "SELECT avg(Injured) FROM perpetrator"
            ]
        },
        {
            "input": "Count the number of regions.",
            "output": [
                "SELECT count(*) FROM region"
            ]
        },
        {
            "input": "What is the starting year for the oldest technician?",
            "output": [
                "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names of storms that did not affect two or more regions?",
            "output": [
                "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "How many tracks are in the AAC audio file media type?",
            "output": [
                "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""
            ]
        },
        {
            "input": "What are all details of the students who registered but did not attend any course?",
            "output": [
                "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
            ]
        },
        {
            "input": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
            "output": [
                "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"
            ]
        },
        {
            "input": "Count the number of distinct instructors who have taught a course.",
            "output": [
                "SELECT COUNT (DISTINCT id) FROM teaches"
            ]
        },
        {
            "input": "Return the characters and durations for each actor.",
            "output": [
                "SELECT Character ,  Duration FROM actor"
            ]
        },
        {
            "input": "What are the names of students who took a course in the Fall of 2003?",
            "output": [
                "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"
            ]
        },
        {
            "input": "Find the location and all games score of the school that has Clemson as its team name.",
            "output": [
                "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
            ]
        },
        {
            "input": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
            "output": [
                "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
            ]
        },
        {
            "input": "Find the id of the order made most recently.",
            "output": [
                "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
            ]
        },
        {
            "input": "List the cities which have more than 2 airports sorted by the number of airports.",
            "output": [
                "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"
            ]
        },
        {
            "input": "What country is the artist who made the fewest songs from?",
            "output": [
                "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "What is the id of the most recent order?",
            "output": [
                "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the phone number of all the customers and staff.",
            "output": [
                "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff"
            ]
        },
        {
            "input": "What are the party emails associated with parties that used the party form that is the most common?",
            "output": [
                "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "Which products has been complained by the customer who has filed least amount of complaints?",
            "output": [
                "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
            "output": [
                "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the name of customer who has the highest amount of loans.",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are ids of the all distinct orders, sorted by placement date?",
            "output": [
                "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed"
            ]
        },
        {
            "input": "How many students are taught by teacher TARRING LEIA?",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\""
            ]
        },
        {
            "input": "Find the number of students taught by TARRING LEIA.",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\""
            ]
        },
        {
            "input": "What is the total amount of money loaned by banks in New York state?",
            "output": [
                "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'"
            ]
        },
        {
            "input": "Who served as an advisor for students who have treasurer votes in the spring election cycle?",
            "output": [
                "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "Find the distinct number of president votes.",
            "output": [
                "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD"
            ]
        },
        {
            "input": "Find the name of bank branches that provided some loans.",
            "output": [
                "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id"
            ]
        },
        {
            "input": "Find the distinct majors of students who have treasurer votes.",
            "output": [
                "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote"
            ]
        },
        {
            "input": "Find the name and credit score of the customers who have some loans.",
            "output": [
                "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id"
            ]
        },
        {
            "input": "Find the number of customers in the banks at New York City.",
            "output": [
                "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'"
            ]
        },
        {
            "input": "Show the ids of all the faculty members who participate in an activity and advise a student.",
            "output": [
                "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student"
            ]
        },
        {
            "input": "List the name and gender for all artists who released songs in March.",
            "output": [
                "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""
            ]
        },
        {
            "input": "List all the username and passwords of users with the most popular role.",
            "output": [
                "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
            "output": [
                "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"
            ]
        },
        {
            "input": "Find all the locations whose names contain the word \"film\".",
            "output": [
                "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\""
            ]
        },
        {
            "input": "What is the total number of airlines?",
            "output": [
                "SELECT count(*) FROM airlines"
            ]
        },
        {
            "input": "What are the total number of the audiences who visited any of the festivals?",
            "output": [
                "SELECT sum(Num_of_Audience) FROM festival_detail"
            ]
        },
        {
            "input": "How many faculty members participate in an activity?",
            "output": [
                "SELECT count(DISTINCT FacID) FROM Faculty_participates_in"
            ]
        },
        {
            "input": "Find the busiest source airport that runs most number of routes in China.",
            "output": [
                "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the details of the markets that can be accessed by walk or bus?",
            "output": [
                "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\""
            ]
        },
        {
            "input": "What are the names of the three artists who have produced the most songs, and how many works did they produce?",
            "output": [
                "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "Find the list of documents that are both in the most three popular type and have the most three popular structure.",
            "output": [
                "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "Find the number of teachers who teach the student called MADLOCK RAY.",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\""
            ]
        },
        {
            "input": "What are the details and star ratings of the three hotels with the lowest price ranges?",
            "output": [
                "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3"
            ]
        },
        {
            "input": "Find the names of songs whose genre is modern or language is English.",
            "output": [
                "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\""
            ]
        },
        {
            "input": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
            "output": [
                "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\""
            ]
        },
        {
            "input": "List the names of all songs that have 4 minute duration or are in English.",
            "output": [
                "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\""
            ]
        },
        {
            "input": "Tell me the ages of the oldest and youngest students studying major 600.",
            "output": [
                "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600"
            ]
        },
        {
            "input": "What is the average age of the female students with secretary votes in the spring election cycle?",
            "output": [
                "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "Show all the ranks and the number of male and female faculty for each rank.",
            "output": [
                "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"
            ]
        },
        {
            "input": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
            "output": [
                "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)"
            ]
        },
        {
            "input": "What are the names of all songs that are ordered by their resolution numbers?",
            "output": [
                "SELECT song_name FROM song ORDER BY resolution"
            ]
        },
        {
            "input": "List the id, genre and artist name of English songs ordered by rating.",
            "output": [
                "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating"
            ]
        },
        {
            "input": "Find the first names of professors who are not playing Canoeing or Kayaking.",
            "output": [
                "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "Find the number of trains for each station, as well as the station network name and services.",
            "output": [
                "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id"
            ]
        },
        {
            "input": "What are the names of banks in the state of New York?",
            "output": [
                "SELECT bname FROM bank WHERE state  =  'New York'"
            ]
        },
        {
            "input": "Find the total number of courses offered.",
            "output": [
                "SELECT count(*) FROM COURSES"
            ]
        },
        {
            "input": "What are the distinct last names of the students who have class president votes?",
            "output": [
                "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE"
            ]
        },
        {
            "input": "For the airline ids with the top 10 most routes operated, what are their names?",
            "output": [
                "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10"
            ]
        },
        {
            "input": "Find the last names of students with major 50.",
            "output": [
                "SELECT LName FROM STUDENT WHERE Major  =  50"
            ]
        },
        {
            "input": "Find the total amount of loans offered by each bank branch.",
            "output": [
                "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname"
            ]
        },
        {
            "input": "What is the last name of the staff who has handled the first ever complaint?",
            "output": [
                "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"
            ]
        },
        {
            "input": "What are the login names and family names of course author and tutors?",
            "output": [
                "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors"
            ]
        },
        {
            "input": "What is the country of origin of the artist who is female and produced a song in Bangla?",
            "output": [
                "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\""
            ]
        },
        {
            "input": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
            "output": [
                "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
            ]
        },
        {
            "input": "What are the top 3 artists with the largest number of songs in the language Bangla?",
            "output": [
                "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "Find the first and last name of all the students of age 18 who have vice president votes.",
            "output": [
                "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"
            ]
        },
        {
            "input": "Which transportation method is used the most often to get to tourist attractions?",
            "output": [
                "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the placement date of the order whose invoice number is 10?",
            "output": [
                "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"
            ]
        },
        {
            "input": "Which students are advised by Michael Goodrich? Give me their first and last names.",
            "output": [
                "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\""
            ]
        },
        {
            "input": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
            "output": [
                "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50"
            ]
        },
        {
            "input": "How many teachers does the student named CHRISSY NABOZNY have?",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\""
            ]
        },
        {
            "input": "For each product, show its name and the number of times it was ordered.",
            "output": [
                "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
            ]
        },
        {
            "input": "What are the names of all songs that are approximately 4 minutes long or are in English?",
            "output": [
                "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\""
            ]
        },
        {
            "input": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
            "output": [
                "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\""
            ]
        },
        {
            "input": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
            "output": [
                "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "What is the phone number of the customer who has filed the most recent complaint?",
            "output": [
                "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
            "output": [
                "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"
            ]
        },
        {
            "input": "Find the number of students taught by the teacher KAWA GORDON.",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\""
            ]
        },
        {
            "input": "How many routes go from the United States to Canada?",
            "output": [
                "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
            ]
        },
        {
            "input": "What document types do have more than 10000 total access number.",
            "output": [
                "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000"
            ]
        },
        {
            "input": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?",
            "output": [
                "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
            "output": [
                "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'"
            ]
        },
        {
            "input": "How many different services are provided by all stations?",
            "output": [
                "SELECT count(DISTINCT services) FROM station"
            ]
        },
        {
            "input": "What is the average duration of songs that have mp3 format and resolution below 800?",
            "output": [
                "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800"
            ]
        },
        {
            "input": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
            "output": [
                "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"
            ]
        },
        {
            "input": "Find the number of students in one classroom.",
            "output": [
                "SELECT count(*) ,  classroom FROM list GROUP BY classroom"
            ]
        },
        {
            "input": "What are all the different product names, and how many complains has each received?",
            "output": [
                "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name"
            ]
        },
        {
            "input": "How many users are logged in?",
            "output": [
                "SELECT count(*) FROM users WHERE user_login  =  1"
            ]
        },
        {
            "input": "What are the names of the activities Mark Giuliano is involved in",
            "output": [
                "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
            ]
        },
        {
            "input": "Which is the email of the party that has used the services the most number of times?",
            "output": [
                "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the dates of orders which belong to the customer named \"Jeramie\".",
            "output": [
                "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
            ]
        },
        {
            "input": "What is the average access count of documents that have the least common structure?",
            "output": [
                "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1"
            ]
        },
        {
            "input": "Find the number of distinct students enrolled in courses.",
            "output": [
                "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment"
            ]
        },
        {
            "input": "Show all the activity names and the number of faculty involved in each activity.",
            "output": [
                "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"
            ]
        },
        {
            "input": "List the name of all different customers who have some loan sorted by their total loan amount.",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)"
            ]
        },
        {
            "input": "Find the number of routes whose destination airports are in Canada.",
            "output": [
                "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'"
            ]
        },
        {
            "input": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
            "output": [
                "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "Show the types of schools that have two schools.",
            "output": [
                "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2"
            ]
        },
        {
            "input": "What are the file sizes and formats for all songs with a resolution lower than 800?",
            "output": [
                "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800"
            ]
        },
        {
            "input": "What are the different names for all songs that have a higher resolution than English songs?",
            "output": [
                "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"
            ]
        },
        {
            "input": "On which day was the order placed whose shipment tracking number is 3452?",
            "output": [
                "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"
            ]
        },
        {
            "input": "Find the number of routes from the United States to Canada.",
            "output": [
                "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
            ]
        },
        {
            "input": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "How many airports are there per city in the US ordered from most to least?",
            "output": [
                "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC"
            ]
        },
        {
            "input": "List all the dates of enrollment and completion of students.",
            "output": [
                "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment"
            ]
        },
        {
            "input": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
            "output": [
                "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\""
            ]
        },
        {
            "input": "Find the ids of the students who participate in Canoeing and Kayaking.",
            "output": [
                "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "How many routes end in a Canadian airport?",
            "output": [
                "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'"
            ]
        },
        {
            "input": "How many students does KAWA GORDON teaches?",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\""
            ]
        },
        {
            "input": "What are the details and ways to get to tourist attractions related to royal family?",
            "output": [
                "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID"
            ]
        },
        {
            "input": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
            "output": [
                "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\""
            ]
        },
        {
            "input": "Show the number of audience in year 2008 or 2010.",
            "output": [
                "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010"
            ]
        },
        {
            "input": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
            "output": [
                "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\""
            ]
        },
        {
            "input": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""
            ]
        },
        {
            "input": "Show the names of the three most recent festivals.",
            "output": [
                "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3"
            ]
        },
        {
            "input": "Find the dates of the tests taken with result \"Pass\".",
            "output": [
                "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\""
            ]
        },
        {
            "input": "What is the name of the country with the most number of home airlines?",
            "output": [
                "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
            "output": [
                "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\""
            ]
        },
        {
            "input": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
            "output": [
                "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
            ]
        },
        {
            "input": "In how many cities are there airports in the country of Greenland?",
            "output": [
                "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'"
            ]
        },
        {
            "input": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
            "output": [
                "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Show names of companies and that of employees in descending order of number of years working for that employee.",
            "output": [
                "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working"
            ]
        },
        {
            "input": "What are the names of the artists that are from the UK and sang songs in English?",
            "output": [
                "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\""
            ]
        },
        {
            "input": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
            "output": [
                "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name"
            ]
        },
        {
            "input": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
            "output": [
                "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC"
            ]
        },
        {
            "input": "Return the names of songs for which format is mp3 and resolution is below 1000.",
            "output": [
                "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"
            ]
        },
        {
            "input": "What is the number of routes whose destinations are Italian airports?",
            "output": [
                "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"
            ]
        },
        {
            "input": "Give me the maximum low temperature and average precipitation at the Amersham station.",
            "output": [
                "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\""
            ]
        },
        {
            "input": "Report the total number of students for each fourth-grade classroom.",
            "output": [
                "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom"
            ]
        },
        {
            "input": "How many female Professors do we have?",
            "output": [
                "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\""
            ]
        },
        {
            "input": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?",
            "output": [
                "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800"
            ]
        },
        {
            "input": "Sort the information about course authors and tutors in alphabetical order of the personal name.",
            "output": [
                "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name"
            ]
        },
        {
            "input": "Give me a list of the names of all songs ordered by their resolution.",
            "output": [
                "SELECT song_name FROM song ORDER BY resolution"
            ]
        },
        {
            "input": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
            "output": [
                "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\""
            ]
        },
        {
            "input": "Find the name of the youngest organization.",
            "output": [
                "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the name of customers who have more than one loan.",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"
            ]
        },
        {
            "input": "List all the activities we have.",
            "output": [
                "SELECT activity_name FROM Activity"
            ]
        },
        {
            "input": "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
            "output": [
                "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom"
            ]
        },
        {
            "input": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
            "output": [
                "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the structure of the document with the least number of accesses?",
            "output": [
                "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names and account balances of customers with the letter a in their names?",
            "output": [
                "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'"
            ]
        },
        {
            "input": "Find the number of routes that have destination John F Kennedy International Airport.",
            "output": [
                "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'"
            ]
        },
        {
            "input": "Find the enrollment date for all the tests that have \"Pass\" result.",
            "output": [
                "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\""
            ]
        },
        {
            "input": "What are the price ranges of five star hotels?",
            "output": [
                "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\""
            ]
        },
        {
            "input": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
            "output": [
                "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\""
            ]
        },
        {
            "input": "Return the structure description of the document that has been accessed the fewest number of times.",
            "output": [
                "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "In which year are there festivals both inside the 'United States' and outside the 'United States'?",
            "output": [
                "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'"
            ]
        },
        {
            "input": "List all the distinct president votes and the vice president votes.",
            "output": [
                "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD"
            ]
        },
        {
            "input": "Find the name of customers who have loans of both Mortgages and Auto.",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'"
            ]
        },
        {
            "input": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
            "output": [
                "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\""
            ]
        },
        {
            "input": "Show all the distinct buildings that have faculty rooms.",
            "output": [
                "SELECT DISTINCT building FROM Faculty"
            ]
        },
        {
            "input": "What is the average number of bank customers?",
            "output": [
                "SELECT avg(no_of_customers) FROM bank"
            ]
        },
        {
            "input": "What is the id of the routes whose source and destination airports are in the United States?",
            "output": [
                "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
            ]
        },
        {
            "input": "List the ids of all distinct orders ordered by placed date.",
            "output": [
                "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed"
            ]
        },
        {
            "input": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
            "output": [
                "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
            ]
        },
        {
            "input": "Show the names of employees that work for companies with sales bigger than 200.",
            "output": [
                "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200"
            ]
        },
        {
            "input": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
            "output": [
                "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating"
            ]
        },
        {
            "input": "Find the names of the artists who are from UK and have produced English songs.",
            "output": [
                "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\""
            ]
        },
        {
            "input": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
            "output": [
                "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"
            ]
        },
        {
            "input": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
            "output": [
                "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"
            ]
        },
        {
            "input": "How many distinct complaint type codes are there in the database?",
            "output": [
                "SELECT count(DISTINCT complaint_type_code) FROM complaints"
            ]
        },
        {
            "input": "What is the number of different different airports that are destinations for American Airlines?",
            "output": [
                "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
            ]
        },
        {
            "input": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
            "output": [
                "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'"
            ]
        },
        {
            "input": "Find the average elevation of all airports for each country.",
            "output": [
                "SELECT avg(elevation) ,  country FROM airports GROUP BY country"
            ]
        },
        {
            "input": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.",
            "output": [
                "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID"
            ]
        },
        {
            "input": "What are the names of all singers that are from the UK and released a song in English?",
            "output": [
                "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\""
            ]
        },
        {
            "input": "Show the names of products that are in at least two events.",
            "output": [
                "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "Which classrooms are used by grade 5?",
            "output": [
                "SELECT DISTINCT classroom FROM list WHERE grade  =  5"
            ]
        },
        {
            "input": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
            "output": [
                "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'"
            ]
        },
        {
            "input": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
            "output": [
                "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\""
            ]
        },
        {
            "input": "Which state has the greatest total number of bank customers?",
            "output": [
                "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
            ]
        },
        {
            "input": "Which orders have shipment after 2000-01-01? Give me the order ids.",
            "output": [
                "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\""
            ]
        },
        {
            "input": "How many students are advised by each rank of faculty? List the rank and the number of students.",
            "output": [
                "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank"
            ]
        },
        {
            "input": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'"
            ]
        },
        {
            "input": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\""
            ]
        },
        {
            "input": "Find name of the services that has never been used.",
            "output": [
                "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id"
            ]
        },
        {
            "input": "List all the login names and family names of course author and tutors.",
            "output": [
                "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors"
            ]
        },
        {
            "input": "How many activities does Mark Giuliano participate in?",
            "output": [
                "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
            ]
        },
        {
            "input": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
            "output": [
                "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "Return the completion date for all the tests that have \"Fail\" result.",
            "output": [
                "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\""
            ]
        },
        {
            "input": "What are the personal names used both by some course authors and some students?",
            "output": [
                "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students"
            ]
        },
        {
            "input": "Show the first name and last name for all the instructors.",
            "output": [
                "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\""
            ]
        },
        {
            "input": "Return the party email that has used party services the greatest number of times.",
            "output": [
                "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the cities which have exactly two airports.",
            "output": [
                "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"
            ]
        },
        {
            "input": "What are the student IDs and middle names of the students enrolled in at most two courses?",
            "output": [
                "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2"
            ]
        },
        {
            "input": "What are the id of all the files in mp3 format?",
            "output": [
                "SELECT f_id FROM files WHERE formats  =  \"mp3\""
            ]
        },
        {
            "input": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?",
            "output": [
                "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\""
            ]
        },
        {
            "input": "Find the first and last names of all the female (sex is F) students who have president votes.",
            "output": [
                "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\""
            ]
        },
        {
            "input": "For each classroom, report the classroom number and the number of grades using it.",
            "output": [
                "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom"
            ]
        },
        {
            "input": "What is the name of the customer who has greatest total loan amount?",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
            ]
        },
        {
            "input": "What buildings have faculty offices?",
            "output": [
                "SELECT DISTINCT building FROM Faculty"
            ]
        },
        {
            "input": "How many male and female assistant professors do we have?",
            "output": [
                "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"
            ]
        },
        {
            "input": "Count the number of Professors who have office in building NEB.",
            "output": [
                "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""
            ]
        },
        {
            "input": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
            "output": [
                "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'"
            ]
        },
        {
            "input": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
            "output": [
                "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\""
            ]
        },
        {
            "input": "What is the name of each course and the corresponding number of student enrollment?",
            "output": [
                "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
            ]
        },
        {
            "input": "What is the name of the bank branch with the greatest number of customers?",
            "output": [
                "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the last names of students studying in room 111.",
            "output": [
                "SELECT lastname FROM list WHERE classroom  =  111"
            ]
        },
        {
            "input": "Return the cities with more than 3 airports in the United States.",
            "output": [
                "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3"
            ]
        },
        {
            "input": "Show the transportation method most people choose to get to tourist attractions.",
            "output": [
                "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the last names of all the teachers that teach GELL TAMI.",
            "output": [
                "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\""
            ]
        },
        {
            "input": "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
            "output": [
                "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\""
            ]
        },
        {
            "input": "What is the most common major among female (sex is F) students?",
            "output": [
                "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "For each country and airline name, how many routes are there?",
            "output": [
                "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name"
            ]
        },
        {
            "input": "List all the image name and URLs in the order of their names.",
            "output": [
                "SELECT image_name ,  image_url FROM images ORDER BY image_name"
            ]
        },
        {
            "input": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
            "output": [
                "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\""
            ]
        },
        {
            "input": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
            "output": [
                "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000"
            ]
        },
        {
            "input": "Find the order id and customer id associated with the oldest order.",
            "output": [
                "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1"
            ]
        },
        {
            "input": "Show the id and star rating of each hotel, ordered by its price from low to high.",
            "output": [
                "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC"
            ]
        },
        {
            "input": "Which students have professors as their advisors? Find their student ids.",
            "output": [
                "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\""
            ]
        },
        {
            "input": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
            "output": [
                "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
            ]
        },
        {
            "input": "Show the ids and names of festivals that have at least two nominations for artworks.",
            "output": [
                "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
            "output": [
                "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1"
            ]
        },
        {
            "input": "What are the distinct majors that students with treasurer votes are studying?",
            "output": [
                "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote"
            ]
        },
        {
            "input": "What are all the dates of enrollment and completion in record?",
            "output": [
                "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment"
            ]
        },
        {
            "input": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
            "output": [
                "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade"
            ]
        },
        {
            "input": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
            "output": [
                "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "List the name and count of each product in all orders.",
            "output": [
                "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
            ]
        },
        {
            "input": "How many routes does American Airlines operate?",
            "output": [
                "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
            ]
        },
        {
            "input": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
            "output": [
                "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME"
            ]
        },
        {
            "input": "Find the average number of customers cross all banks.",
            "output": [
                "SELECT avg(no_of_customers) FROM bank"
            ]
        },
        {
            "input": "Which classrooms are used by grade 4?",
            "output": [
                "SELECT DISTINCT classroom FROM list WHERE grade  =  4"
            ]
        },
        {
            "input": "What is the detail of the location UK Gallery?",
            "output": [
                "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\""
            ]
        },
        {
            "input": "For each account type, find the average account balance of customers with credit score lower than 50.",
            "output": [
                "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type"
            ]
        },
        {
            "input": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
            "output": [
                "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\""
            ]
        },
        {
            "input": "What are the first and last name of the faculty who has the most students?",
            "output": [
                "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the name of airline which runs the most number of routes.",
            "output": [
                "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Count the number of distinct names associated with the photos.",
            "output": [
                "SELECT count(DISTINCT Name) FROM PHOTOS"
            ]
        },
        {
            "input": "What are the names and ids of the tourist attractions that are visited at most once?",
            "output": [
                "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1"
            ]
        },
        {
            "input": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
            "output": [
                "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number"
            ]
        },
        {
            "input": "How many trains have 'Express' in their names?",
            "output": [
                "SELECT count(*) FROM train WHERE name LIKE \"%Express%\""
            ]
        },
        {
            "input": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
            "output": [
                "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
            "output": [
                "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "How many courses are there in total?",
            "output": [
                "SELECT count(*) FROM COURSES"
            ]
        },
        {
            "input": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
            "output": [
                "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7"
            ]
        },
        {
            "input": "How many airlines are there?",
            "output": [
                "SELECT count(*) FROM airlines"
            ]
        },
        {
            "input": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
            "output": [
                "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number"
            ]
        },
        {
            "input": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?",
            "output": [
                "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\""
            ]
        },
        {
            "input": "What is the total number of customers who use banks in New York City?",
            "output": [
                "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'"
            ]
        },
        {
            "input": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
            "output": [
                "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student"
            ]
        },
        {
            "input": "How many students does one classroom have?",
            "output": [
                "SELECT count(*) ,  classroom FROM list GROUP BY classroom"
            ]
        },
        {
            "input": "Find the name of customers who do not have an saving account.",
            "output": [
                "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"
            ]
        },
        {
            "input": "List all the information about course authors and tutors in alphabetical order of the personal name.",
            "output": [
                "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name"
            ]
        },
        {
            "input": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
            "output": [
                "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "For each  airport name, how many routes start at that airport, ordered from most to least?",
            "output": [
                "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC"
            ]
        },
        {
            "input": "Count the number of tourists who did not visit any place.",
            "output": [
                "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
            ]
        },
        {
            "input": "What is the name of the song that was released most recently?",
            "output": [
                "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?",
            "output": [
                "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
            "output": [
                "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7"
            ]
        },
        {
            "input": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\""
            ]
        },
        {
            "input": "Show the names of products and the number of events they are in.",
            "output": [
                "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name"
            ]
        },
        {
            "input": "List the name of all products along with the number of complaints that they have received.",
            "output": [
                "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name"
            ]
        },
        {
            "input": "Find the visit date and details of the tourist whose detail is 'Vincent'",
            "output": [
                "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""
            ]
        },
        {
            "input": "What are the last names of students in room 111?",
            "output": [
                "SELECT lastname FROM list WHERE classroom  =  111"
            ]
        },
        {
            "input": "What is the average rating of songs for each language?",
            "output": [
                "SELECT avg(rating) ,  languages FROM song GROUP BY languages"
            ]
        },
        {
            "input": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
            "output": [
                "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Count the number of male students who had class senator votes in the fall election cycle.",
            "output": [
                "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\""
            ]
        },
        {
            "input": "Give me the number of faculty members who participate in an activity",
            "output": [
                "SELECT count(DISTINCT FacID) FROM Faculty_participates_in"
            ]
        },
        {
            "input": "What is the name of the airline with the most routes?",
            "output": [
                "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the average rating and resolution of songs that are in Bangla?",
            "output": [
                "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""
            ]
        },
        {
            "input": "What are the last names of individuals who have been contact individuals for an organization?",
            "output": [
                "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id"
            ]
        },
        {
            "input": "Find the names and number of works of the three artists who have produced the most songs.",
            "output": [
                "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "How many available hotels are there in total?",
            "output": [
                "SELECT count(*) FROM HOTELS"
            ]
        },
        {
            "input": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
            "output": [
                "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
            ]
        },
        {
            "input": "What is the total number of faculty members?",
            "output": [
                "SELECT count(*) FROM Faculty"
            ]
        },
        {
            "input": "Find the common login name of course authors and students.",
            "output": [
                "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"
            ]
        },
        {
            "input": "For each grade 0 classroom, return the classroom number and the count of students.",
            "output": [
                "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"
            ]
        },
        {
            "input": "Find the distinct last names of the students who have class president votes.",
            "output": [
                "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE"
            ]
        },
        {
            "input": "what are the order id and customer id of the oldest order?",
            "output": [
                "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1"
            ]
        },
        {
            "input": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
            "output": [
                "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'"
            ]
        },
        {
            "input": "Show the average price range of hotels that have 5 star ratings and allow pets.",
            "output": [
                "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1"
            ]
        },
        {
            "input": "How many voting records do we have?",
            "output": [
                "SELECT count(*) FROM VOTING_RECORD"
            ]
        },
        {
            "input": "What are the dates of the orders made by the customer named \"Jeramie\"?",
            "output": [
                "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
            ]
        },
        {
            "input": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?",
            "output": [
                "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "What are the names of the different banks that have provided loans?",
            "output": [
                "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id"
            ]
        },
        {
            "input": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
            "output": [
                "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
            "output": [
                "SELECT document_name ,  access_count FROM documents ORDER BY document_name"
            ]
        },
        {
            "input": "Find the number of different airports which are the destinations of the American Airlines.",
            "output": [
                "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
            ]
        },
        {
            "input": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?",
            "output": [
                "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
            ]
        },
        {
            "input": "What are the total account balances for each customer from Utah or Texas?",
            "output": [
                "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'"
            ]
        },
        {
            "input": "What is the name, city, country, and elevation for every airport in the city of New York?",
            "output": [
                "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'"
            ]
        },
        {
            "input": "What is the maximum elevation of all airports in the country of Iceland?",
            "output": [
                "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'"
            ]
        },
        {
            "input": "What are the names of the tourist attractions that can be accessed by bus?",
            "output": [
                "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\""
            ]
        },
        {
            "input": "For each state, find the total account balance of customers whose credit score is above 100.",
            "output": [
                "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state"
            ]
        },
        {
            "input": "How many Bangladeshi artists are listed?",
            "output": [
                "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\""
            ]
        },
        {
            "input": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
            "output": [
                "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\""
            ]
        },
        {
            "input": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
            "output": [
                "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\""
            ]
        },
        {
            "input": "What are the first name and last name of all the instructors?",
            "output": [
                "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\""
            ]
        },
        {
            "input": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)"
            ]
        },
        {
            "input": "Count the number of services.",
            "output": [
                "SELECT count(*) FROM services"
            ]
        },
        {
            "input": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
            "output": [
                "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
            "output": [
                "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?",
            "output": [
                "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)"
            ]
        },
        {
            "input": "How many teachers does the student named MADLOCK RAY have?",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\""
            ]
        },
        {
            "input": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
            "output": [
                "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"
            ]
        },
        {
            "input": "Find all the order items whose product id is 11. What are the order item ids?",
            "output": [
                "SELECT order_item_id FROM order_items WHERE product_id = 11"
            ]
        },
        {
            "input": "Show the names of all the activities Mark Giuliano participates in.",
            "output": [
                "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
            ]
        },
        {
            "input": "What are the names of customers who have taken out more than one loan?",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"
            ]
        },
        {
            "input": "Find the description of the most popular role among the users that have logged in.",
            "output": [
                "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "Find the average number of customers in all banks of Utah state.",
            "output": [
                "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'"
            ]
        },
        {
            "input": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""
            ]
        },
        {
            "input": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
            "output": [
                "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\""
            ]
        },
        {
            "input": "what are the last names of the teachers who teach grade 5?",
            "output": [
                "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"
            ]
        },
        {
            "input": "Report the distinct president vote and the vice president vote.",
            "output": [
                "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD"
            ]
        },
        {
            "input": "Find the last names of the teachers that teach fifth grade.",
            "output": [
                "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"
            ]
        },
        {
            "input": "Find the city and name of bank branches that provide business loans.",
            "output": [
                "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"
            ]
        },
        {
            "input": "What is the date of enrollment of the course named \"Spanish\"?",
            "output": [
                "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\""
            ]
        },
        {
            "input": "Find the first names of the teachers that teach first grade.",
            "output": [
                "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1"
            ]
        },
        {
            "input": "What are the names of the customers who have made two or less orders?",
            "output": [
                "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"
            ]
        },
        {
            "input": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\""
            ]
        },
        {
            "input": "Find the details of all the markets that are accessible by walk or bus.",
            "output": [
                "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\""
            ]
        },
        {
            "input": "Show the average price of hotels for different pet policy.",
            "output": [
                "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn"
            ]
        },
        {
            "input": "Show the names of customers who have the most mailshots.",
            "output": [
                "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the usernames and passwords of users that have the most common role?",
            "output": [
                "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
            "output": [
                "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\""
            ]
        },
        {
            "input": "What is the total number of customers across banks?",
            "output": [
                "SELECT sum(no_of_customers) FROM bank"
            ]
        },
        {
            "input": "Find the ids of all the order items whose product id is 11.",
            "output": [
                "SELECT order_item_id FROM order_items WHERE product_id = 11"
            ]
        },
        {
            "input": "Find the name of the teacher who teaches the largest number of students.",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the detail of each visitor?",
            "output": [
                "SELECT Tourist_Details FROM VISITORS"
            ]
        },
        {
            "input": "What are the distinct secretary votes in the fall election cycle?",
            "output": [
                "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\""
            ]
        },
        {
            "input": "Show all the faculty ranks and the number of students advised by each rank.",
            "output": [
                "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank"
            ]
        },
        {
            "input": "What are the names of all genres in alphabetical order, combined with its ratings?",
            "output": [
                "SELECT g_name ,  rating FROM genre ORDER BY g_name"
            ]
        },
        {
            "input": "What is the name of the organization that was formed most recently?",
            "output": [
                "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
            "output": [
                "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100"
            ]
        },
        {
            "input": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
            "output": [
                "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')"
            ]
        },
        {
            "input": "Find the branch names of banks in the New York state.",
            "output": [
                "SELECT bname FROM bank WHERE state  =  'New York'"
            ]
        },
        {
            "input": "Find names and times of trains that run through stations for the local authority Chiltern.",
            "output": [
                "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\""
            ]
        },
        {
            "input": "What are the prices of products that have never gotten a complaint?",
            "output": [
                "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)"
            ]
        },
        {
            "input": "What are the completion dates of all the tests that have result \"Fail\"?",
            "output": [
                "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\""
            ]
        },
        {
            "input": "How many songs have 4 minute duration?",
            "output": [
                "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""
            ]
        },
        {
            "input": "What is the number of routes that end at John F Kennedy International Airport?",
            "output": [
                "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'"
            ]
        },
        {
            "input": "What are the details of the shops that can be accessed by walk?",
            "output": [
                "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\""
            ]
        },
        {
            "input": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
            "output": [
                "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\""
            ]
        },
        {
            "input": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
            "output": [
                "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\""
            ]
        },
        {
            "input": "What are the names and locations of festivals?",
            "output": [
                "SELECT Festival_Name ,  LOCATION FROM festival_detail"
            ]
        },
        {
            "input": "What is the name of the party form that is most common?",
            "output": [
                "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the details of the shops that can be reached by walk.",
            "output": [
                "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\""
            ]
        },
        {
            "input": "Show first name and last name for all the students advised by Michael Goodrich.",
            "output": [
                "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\""
            ]
        },
        {
            "input": "What is the name of the airport with the most number of routes that start in China?",
            "output": [
                "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?",
            "output": [
                "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\""
            ]
        },
        {
            "input": "Find the number of voting records in total.",
            "output": [
                "SELECT count(*) FROM VOTING_RECORD"
            ]
        },
        {
            "input": "Show the names and ids of tourist attractions that are visited at least two times.",
            "output": [
                "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
            "output": [
                "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"
            ]
        },
        {
            "input": "Count the number of users that are logged in.",
            "output": [
                "SELECT count(*) FROM users WHERE user_login  =  1"
            ]
        },
        {
            "input": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
            "output": [
                "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
            "output": [
                "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000"
            ]
        },
        {
            "input": "List all the subject names.",
            "output": [
                "SELECT subject_name FROM SUBJECTS"
            ]
        },
        {
            "input": "What are the names of the songs that are modern or sung in English?",
            "output": [
                "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\""
            ]
        },
        {
            "input": "What is the average credit score for customers who have taken a loan?",
            "output": [
                "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
            ]
        },
        {
            "input": "Find the number of activities Mark Giuliano is involved in.",
            "output": [
                "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
            ]
        },
        {
            "input": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
            "output": [
                "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"
            ]
        },
        {
            "input": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
            "output": [
                "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\""
            ]
        },
        {
            "input": "Find the name of the most popular party form.",
            "output": [
                "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Which tourist attractions are visited at least twice? Give me their names and ids.",
            "output": [
                "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "List the name and the number of enrolled student for each course.",
            "output": [
                "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
            ]
        },
        {
            "input": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
            "output": [
                "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"
            ]
        },
        {
            "input": "What are the cities with exactly two airports?",
            "output": [
                "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"
            ]
        },
        {
            "input": "What are the names and cities of bank branches that offer loans for business?",
            "output": [
                "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"
            ]
        },
        {
            "input": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
            "output": [
                "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20"
            ]
        },
        {
            "input": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
            "output": [
                "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\""
            ]
        },
        {
            "input": "What are the names of the tourist attractions Vincent and Marcelle visit?",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\""
            ]
        },
        {
            "input": "What are the faculty id and the number of students each faculty has?",
            "output": [
                "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID"
            ]
        },
        {
            "input": "What are the distinct first names of the students who have class president votes?",
            "output": [
                "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE"
            ]
        },
        {
            "input": "How many students does LORIA ONDERSMA teaches?",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\""
            ]
        },
        {
            "input": "Find the id and star rating of each hotel and sort them in increasing order of price.",
            "output": [
                "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC"
            ]
        },
        {
            "input": "Count the number of female Professors we have.",
            "output": [
                "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\""
            ]
        },
        {
            "input": "What are the average prices of hotels grouped by their pet policy.",
            "output": [
                "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn"
            ]
        },
        {
            "input": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
            "output": [
                "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC"
            ]
        },
        {
            "input": "Find the emails of parties with the most popular party form.",
            "output": [
                "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "How many faculty do we have?",
            "output": [
                "SELECT count(*) FROM Faculty"
            ]
        },
        {
            "input": "For each grade 0 classroom, report the total number of students.",
            "output": [
                "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"
            ]
        },
        {
            "input": "Find the average credit score of the customers who have some loan.",
            "output": [
                "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
            ]
        },
        {
            "input": "Show the number of male and female assistant professors.",
            "output": [
                "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"
            ]
        },
        {
            "input": "What is the id of the longest song?",
            "output": [
                "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
            ]
        },
        {
            "input": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".",
            "output": [
                "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\""
            ]
        },
        {
            "input": "Find the prices of products which has never received a single complaint.",
            "output": [
                "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)"
            ]
        },
        {
            "input": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
            "output": [
                "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3"
            ]
        },
        {
            "input": "For each country, what is the average elevation of that country's airports?",
            "output": [
                "SELECT avg(elevation) ,  country FROM airports GROUP BY country"
            ]
        },
        {
            "input": "Find the average access counts of documents with functional area \"Acknowledgement\".",
            "output": [
                "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\""
            ]
        },
        {
            "input": "List names for drivers from Hartford city and younger than 40.",
            "output": [
                "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40"
            ]
        },
        {
            "input": "How many songs, on average, are sung by a female artist?",
            "output": [
                "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\""
            ]
        },
        {
            "input": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
            "output": [
                "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1"
            ]
        },
        {
            "input": "What is the name of the artist who produced the shortest song?",
            "output": [
                "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1"
            ]
        },
        {
            "input": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
            "output": [
                "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the number of routes with destination airports in Italy.",
            "output": [
                "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"
            ]
        },
        {
            "input": "Return the codes of the document types that do not have a total access count of over 10000.",
            "output": [
                "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000"
            ]
        },
        {
            "input": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
            "output": [
                "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"
            ]
        },
        {
            "input": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
            "output": [
                "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")"
            ]
        },
        {
            "input": "Find the distinct first names of the students who have class senator votes.",
            "output": [
                "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE"
            ]
        },
        {
            "input": "What is the average rating and resolution of all bangla songs?",
            "output": [
                "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""
            ]
        },
        {
            "input": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
            "output": [
                "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "What are the last names of the teachers who teach the student called GELL TAMI?",
            "output": [
                "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\""
            ]
        },
        {
            "input": "What is the count of the songs that last approximately 4 minutes?",
            "output": [
                "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""
            ]
        },
        {
            "input": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
            "output": [
                "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'"
            ]
        },
        {
            "input": "Find the last name of the individuals that have been contact individuals of an organization.",
            "output": [
                "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id"
            ]
        },
        {
            "input": "Find the names of the courses that have just one student enrollment.",
            "output": [
                "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1"
            ]
        },
        {
            "input": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
            "output": [
                "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""
            ]
        },
        {
            "input": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
            "output": [
                "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
            ]
        },
        {
            "input": "Count the number of students the teacher LORIA ONDERSMA teaches.",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\""
            ]
        },
        {
            "input": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
            "output": [
                "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0"
            ]
        },
        {
            "input": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
            "output": [
                "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\""
            ]
        },
        {
            "input": "Show the id, name of each festival and the number of artworks it has nominated.",
            "output": [
                "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID"
            ]
        },
        {
            "input": "How many tourists did not make any visit?",
            "output": [
                "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
            ]
        },
        {
            "input": "How many distinct types of accounts are there?",
            "output": [
                "SELECT count(DISTINCT acc_type) FROM customer"
            ]
        },
        {
            "input": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
            "output": [
                "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\""
            ]
        },
        {
            "input": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
            "output": [
                "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8"
            ]
        },
        {
            "input": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\""
            ]
        },
        {
            "input": "What are the faculty ids of all the male faculty members?",
            "output": [
                "SELECT FacID FROM Faculty WHERE Sex  =  'M'"
            ]
        },
        {
            "input": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
            "output": [
                "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\""
            ]
        },
        {
            "input": "List the file size and format for all songs that have resolution lower than 800.",
            "output": [
                "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800"
            ]
        },
        {
            "input": "How many artists are male and how many are female?",
            "output": [
                "SELECT count(*) ,  gender FROM artist GROUP BY gender"
            ]
        },
        {
            "input": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
            "output": [
                "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name"
            ]
        },
        {
            "input": "Show the names and ids of tourist attractions that are visited at most once.",
            "output": [
                "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1"
            ]
        },
        {
            "input": "What are the names of customers who do not have saving accounts?",
            "output": [
                "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"
            ]
        },
        {
            "input": "How many Professors are in building NEB?",
            "output": [
                "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""
            ]
        },
        {
            "input": "Find the number and time of the train that goes from Chennai to Guruvayur.",
            "output": [
                "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'"
            ]
        },
        {
            "input": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
            "output": [
                "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8"
            ]
        },
        {
            "input": "Find the number of routes operated by American Airlines.",
            "output": [
                "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
            ]
        },
        {
            "input": "Return the names of singers who are from UK and released an English song.",
            "output": [
                "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\""
            ]
        },
        {
            "input": "What are the first names of the teachers who teach grade 1?",
            "output": [
                "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1"
            ]
        },
        {
            "input": "Find the total amount of loans provided by bank branches in the state of New York.",
            "output": [
                "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'"
            ]
        },
        {
            "input": "On what day was the order with invoice number 10 placed?",
            "output": [
                "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"
            ]
        },
        {
            "input": "How many faculty members do we have for each rank and gender?",
            "output": [
                "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"
            ]
        },
        {
            "input": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\""
            ]
        },
        {
            "input": "What are the distinct president votes on 08/30/2015?",
            "output": [
                "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\""
            ]
        },
        {
            "input": "Which course author teaches the \"advanced database\" course? Give me his or her login name.",
            "output": [
                "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\""
            ]
        },
        {
            "input": "Show all distinct product categories along with the number of mailshots in each category.",
            "output": [
                "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category"
            ]
        },
        {
            "input": "Count the number of customers.",
            "output": [
                "SELECT count(*) FROM customers"
            ]
        },
        {
            "input": "Return all the distinct secretary votes made in the fall election cycle.",
            "output": [
                "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\""
            ]
        },
        {
            "input": "What is the total account balance for customers with a credit score of above 100 for the different states?",
            "output": [
                "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state"
            ]
        },
        {
            "input": "Which are the first and last names of the students taught by MARROTTE KIRK?",
            "output": [
                "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\""
            ]
        },
        {
            "input": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\""
            ]
        },
        {
            "input": "For each airport name, how many routes start at that airport?",
            "output": [
                "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"
            ]
        },
        {
            "input": "What are the first and last names of all the female students who have president votes?",
            "output": [
                "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\""
            ]
        },
        {
            "input": "What are the names and genders of all artists who released songs in the month of March?",
            "output": [
                "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""
            ]
        },
        {
            "input": "What are the names of the services that have never been used?",
            "output": [
                "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id"
            ]
        },
        {
            "input": "How many artworks are there?",
            "output": [
                "SELECT count(*) FROM artwork"
            ]
        },
        {
            "input": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\""
            ]
        },
        {
            "input": "How many services are there?",
            "output": [
                "SELECT count(*) FROM services"
            ]
        },
        {
            "input": "Show the details and star ratings of the 3 least expensive hotels.",
            "output": [
                "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3"
            ]
        },
        {
            "input": "What are the names of documents that have both one of the three most common types and one of three most common structures?",
            "output": [
                "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
            "output": [
                "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""
            ]
        },
        {
            "input": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.",
            "output": [
                "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "Show the names of companies and the number of employees they have",
            "output": [
                "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name"
            ]
        },
        {
            "input": "Show the party with drivers from Hartford and drivers older than 40.",
            "output": [
                "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40"
            ]
        },
        {
            "input": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
            "output": [
                "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"
            ]
        },
        {
            "input": "What are the ids of the faculty members who do not advise any student.",
            "output": [
                "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student"
            ]
        },
        {
            "input": "Find the address of the location named \"UK Gallery\".",
            "output": [
                "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\""
            ]
        },
        {
            "input": "What is the average price range of five star hotels that allow pets?",
            "output": [
                "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1"
            ]
        },
        {
            "input": "List the names of all genres in alphabetical oder, together with its ratings.",
            "output": [
                "SELECT g_name ,  rating FROM genre ORDER BY g_name"
            ]
        },
        {
            "input": "What is the average credit score for customers who have never taken a loan?",
            "output": [
                "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"
            ]
        },
        {
            "input": "What are the cities that have more than 2 airports sorted by number of airports?",
            "output": [
                "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"
            ]
        },
        {
            "input": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
            "output": [
                "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\""
            ]
        },
        {
            "input": "What are the names of all male British artists?",
            "output": [
                "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""
            ]
        },
        {
            "input": "What is the average high temperature for each day of week?",
            "output": [
                "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week"
            ]
        },
        {
            "input": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
            "output": [
                "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID"
            ]
        },
        {
            "input": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
            "output": [
                "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the name and phone of the customer without any mailshot.",
            "output": [
                "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)"
            ]
        },
        {
            "input": "What are the names and urls of images, sorted alphabetically?",
            "output": [
                "SELECT image_name ,  image_url FROM images ORDER BY image_name"
            ]
        },
        {
            "input": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
            "output": [
                "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC"
            ]
        },
        {
            "input": "What are the last names of students studying major 50?",
            "output": [
                "SELECT LName FROM STUDENT WHERE Major  =  50"
            ]
        },
        {
            "input": "Show the type of school and the number of buses for each type.",
            "output": [
                "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type"
            ]
        },
        {
            "input": "Find the names of all English songs.",
            "output": [
                "SELECT song_name FROM song WHERE languages  =  \"english\""
            ]
        },
        {
            "input": "What is the name of the song that was released in the most recent year?",
            "output": [
                "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the name of the customer with the worst credit score?",
            "output": [
                "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"
            ]
        },
        {
            "input": "What are the states, account types, and credit scores for customers who have 0 loans?",
            "output": [
                "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0"
            ]
        },
        {
            "input": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
            "output": [
                "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"
            ]
        },
        {
            "input": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\""
            ]
        },
        {
            "input": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\""
            ]
        },
        {
            "input": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
            "output": [
                "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""
            ]
        },
        {
            "input": "What is the location of the festival with the largest number of audience?",
            "output": [
                "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the names of the drivers without a school bus.",
            "output": [
                "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)"
            ]
        },
        {
            "input": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?",
            "output": [
                "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"
            ]
        },
        {
            "input": "What are the different names and credit scores of customers who have taken a loan?",
            "output": [
                "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id"
            ]
        },
        {
            "input": "Find the number of routes for each source airport and the airport name.",
            "output": [
                "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"
            ]
        },
        {
            "input": "What are the names of the artists who sang the shortest song?",
            "output": [
                "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1"
            ]
        },
        {
            "input": "Find the total number of available hotels.",
            "output": [
                "SELECT count(*) FROM HOTELS"
            ]
        },
        {
            "input": "Find the state which has the most number of customers.",
            "output": [
                "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
            ]
        },
        {
            "input": "How many distinct names are associated with all the photos?",
            "output": [
                "SELECT count(DISTINCT Name) FROM PHOTOS"
            ]
        },
        {
            "input": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
            "output": [
                "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\""
            ]
        },
        {
            "input": "Show the description and code of the attraction type most tourist attractions belong to.",
            "output": [
                "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
            "output": [
                "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\""
            ]
        },
        {
            "input": "Return the gender and name of artist who produced the song with the lowest resolution.",
            "output": [
                "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1"
            ]
        },
        {
            "input": "Find the average credit score of the customers who do not have any loan.",
            "output": [
                "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"
            ]
        },
        {
            "input": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
            "output": [
                "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
            "output": [
                "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID"
            ]
        },
        {
            "input": "What are the names of banks that have loaned money to customers with credit scores below 100?",
            "output": [
                "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100"
            ]
        },
        {
            "input": "For each file format, return the number of artists who released songs in that format.",
            "output": [
                "SELECT count(*) ,  formats FROM files GROUP BY formats"
            ]
        },
        {
            "input": "What is the name of the airport that is the destination of the most number of routes that start in China?",
            "output": [
                "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Show all the buildings that have at least 10 professors.",
            "output": [
                "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"
            ]
        },
        {
            "input": "Find the total account balance of each customer from Utah or Texas.",
            "output": [
                "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'"
            ]
        },
        {
            "input": "Find the id of routes whose source and destination airports are in the United States.",
            "output": [
                "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
            ]
        },
        {
            "input": "How many male (sex is M) students have class senator votes in the fall election cycle?",
            "output": [
                "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\""
            ]
        },
        {
            "input": "What is the song in the volume with the maximum weeks on top?",
            "output": [
                "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names of customers with checking balances lower than the average checking balance?",
            "output": [
                "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"
            ]
        },
        {
            "input": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
            "output": [
                "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
            ]
        },
        {
            "input": "What are the different names and ages of every friend of either Dan or alice?",
            "output": [
                "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'"
            ]
        },
        {
            "input": "What are the official native languages that contain the string \"English\".",
            "output": [
                "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
            ]
        },
        {
            "input": "For the problem with id 10, return the ids and dates of its problem logs.",
            "output": [
                "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10"
            ]
        },
        {
            "input": "How many distinct currency codes are there for all drama workshop groups?",
            "output": [
                "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups"
            ]
        },
        {
            "input": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
            "output": [
                "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID"
            ]
        },
        {
            "input": "What are the average and minimum price (in Euro) of all products?",
            "output": [
                "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
            ]
        },
        {
            "input": "What are the dates of ceremony and results for each music festival?",
            "output": [
                "SELECT Date_of_ceremony ,  RESULT FROM music_festival"
            ]
        },
        {
            "input": "Which city has the most addresses? List the city name, number of addresses, and city id.",
            "output": [
                "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the maximum and minimum number of silver medals for clubs.",
            "output": [
                "SELECT max(Silver) ,  min(Silver) FROM club_rank"
            ]
        },
        {
            "input": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
            "output": [
                "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')"
            ]
        },
        {
            "input": "What is the date when the document \"Marry CV\" was stored?",
            "output": [
                "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\""
            ]
        },
        {
            "input": "Find the average order quantity per order.",
            "output": [
                "SELECT avg(order_quantity) FROM order_items"
            ]
        },
        {
            "input": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
            "output": [
                "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002"
            ]
        },
        {
            "input": "Which delegates are from counties with population smaller than 100000?",
            "output": [
                "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000"
            ]
        },
        {
            "input": "What are the dates with a maximum temperature higher than 85?",
            "output": [
                "SELECT date FROM weather WHERE max_temperature_f  >  85"
            ]
        },
        {
            "input": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
            "output": [
                "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40"
            ]
        },
        {
            "input": "What are the names of all students who tried out in alphabetical order?",
            "output": [
                "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName"
            ]
        },
        {
            "input": "List the name, origin and owner of each program.",
            "output": [
                "SELECT name ,  origin ,  OWNER FROM program"
            ]
        },
        {
            "input": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
            "output": [
                "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"
            ]
        },
        {
            "input": "What is all the information regarding employees with salaries above the minimum and under 2500?",
            "output": [
                "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500"
            ]
        },
        {
            "input": "Give me the average and minimum price (in Euro) of the products.",
            "output": [
                "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
            ]
        },
        {
            "input": "Show the protein name and the institution name.",
            "output": [
                "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id"
            ]
        },
        {
            "input": "What is the name of all the people who are older than at least one engineer? Order them by age.",
            "output": [
                "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age"
            ]
        },
        {
            "input": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
            "output": [
                "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25"
            ]
        },
        {
            "input": "Which cities served as a host city after 2010?",
            "output": [
                "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010"
            ]
        },
        {
            "input": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
            "output": [
                "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000"
            ]
        },
        {
            "input": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
            "output": [
                "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900"
            ]
        },
        {
            "input": "get the details of employees who manage a department.",
            "output": [
                "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id"
            ]
        },
        {
            "input": "what are the top 3 highest support rates?",
            "output": [
                "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
            ]
        },
        {
            "input": "Give me the dates when the max temperature was higher than 85.",
            "output": [
                "SELECT date FROM weather WHERE max_temperature_f  >  85"
            ]
        },
        {
            "input": "What is the average number of working horses of farms with more than 5000 total number of horses?",
            "output": [
                "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
            ]
        },
        {
            "input": "Please show the nominee who has been nominated the greatest number of times.",
            "output": [
                "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Find the level name of the catalog with the lowest price (in USD).",
            "output": [
                "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
            ]
        },
        {
            "input": "Find all the ids and dates of the logs for the problem whose id is 10.",
            "output": [
                "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10"
            ]
        },
        {
            "input": "Find the zip code in which the average mean visibility is lower than 10.",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"
            ]
        },
        {
            "input": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
            "output": [
                "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
            ]
        },
        {
            "input": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
            "output": [
                "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC"
            ]
        },
        {
            "input": "What are the type codes and descriptions of each budget type?",
            "output": [
                "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"
            ]
        },
        {
            "input": "What is the id, name and IATA code of the airport that had most number of flights?",
            "output": [
                "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
            "output": [
                "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""
            ]
        },
        {
            "input": "What is the zip code in which the average mean sea level pressure is the lowest?",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"
            ]
        },
        {
            "input": "Count the number of storms in which at least 1 person died.",
            "output": [
                "SELECT count(*) FROM storm WHERE Number_Deaths  >  0"
            ]
        },
        {
            "input": "Name all the products with next entry ID greater than 8.",
            "output": [
                "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8"
            ]
        },
        {
            "input": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
            "output": [
                "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700"
            ]
        },
        {
            "input": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
            "output": [
                "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet"
            ]
        },
        {
            "input": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
            "output": [
                "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""
            ]
        },
        {
            "input": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
            "output": [
                "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"
            ]
        },
        {
            "input": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
            "output": [
                "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4"
            ]
        },
        {
            "input": "What is the project id and detail for the project with at least two documents?",
            "output": [
                "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2"
            ]
        },
        {
            "input": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
            "output": [
                "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\""
            ]
        },
        {
            "input": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
            "output": [
                "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )"
            ]
        },
        {
            "input": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
            "output": [
                "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date"
            ]
        },
        {
            "input": "What is the average song rating for each language?",
            "output": [
                "SELECT avg(rating) ,  languages FROM song GROUP BY languages"
            ]
        },
        {
            "input": "What are the full names of faculties with sex M and who live in building NEB?",
            "output": [
                "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""
            ]
        },
        {
            "input": "List the names of patients who have made appointments.",
            "output": [
                "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn"
            ]
        },
        {
            "input": "Show all official native languages that contain the word \"English\".",
            "output": [
                "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
            ]
        },
        {
            "input": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
            "output": [
                "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40"
            ]
        },
        {
            "input": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
            "output": [
                "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2"
            ]
        },
        {
            "input": "Return the top 3 greatest support rates.",
            "output": [
                "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
            ]
        },
        {
            "input": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
            "output": [
                "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate"
            ]
        },
        {
            "input": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
            "output": [
                "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"
            ]
        },
        {
            "input": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
            "output": [
                "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000"
            ]
        },
        {
            "input": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
            "output": [
                "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"
            ]
        },
        {
            "input": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
            "output": [
                "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
            ]
        },
        {
            "input": "Find the number of distinct currency codes used in drama workshop groups.",
            "output": [
                "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups"
            ]
        },
        {
            "input": "Give the number of students living in either HKG or CHI.",
            "output": [
                "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
            ]
        },
        {
            "input": "What is the total horses record for each farm, sorted ascending?",
            "output": [
                "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"
            ]
        },
        {
            "input": "How many days had both mean humidity above 50 and mean visibility above 8?",
            "output": [
                "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
            ]
        },
        {
            "input": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
            "output": [
                "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"
            ]
        },
        {
            "input": "Give the average number of working horses on farms with more than 5000 total horses.",
            "output": [
                "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
            ]
        },
        {
            "input": "What is the name of the nurse has the most appointments?",
            "output": [
                "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the full names of students minoring in department 140?",
            "output": [
                "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140"
            ]
        },
        {
            "input": "Find the physician who prescribed the highest dose. What is his or her name?",
            "output": [
                "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
            ]
        },
        {
            "input": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
            "output": [
                "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80"
            ]
        },
        {
            "input": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
            "output": [
                "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\""
            ]
        },
        {
            "input": "Find the employee id for all employees who earn more than the average salary.",
            "output": [
                "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)"
            ]
        },
        {
            "input": "List the all the assets make, model, details by the disposed date ascendingly.",
            "output": [
                "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC"
            ]
        },
        {
            "input": "List the full name (first and last name), and salary for those employees who earn below 6000.",
            "output": [
                "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000"
            ]
        },
        {
            "input": "List the amount and donor name for the largest amount of donation.",
            "output": [
                "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
            "output": [
                "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")"
            ]
        },
        {
            "input": "For each delegate, find the names of the party they are part of.",
            "output": [
                "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID"
            ]
        },
        {
            "input": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
            "output": [
                "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC"
            ]
        },
        {
            "input": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
            "output": [
                "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85"
            ]
        },
        {
            "input": "What are the names and addressed of customers who have both New and Pending orders?",
            "output": [
                "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
            ]
        },
        {
            "input": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
            "output": [
                "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
            ]
        },
        {
            "input": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\""
            ]
        },
        {
            "input": "Find the city the store named \"FJA Filming\" is in.",
            "output": [
                "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\""
            ]
        },
        {
            "input": "Find the name and age of the person who is a friend of both Dan and Alice.",
            "output": [
                "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"
            ]
        },
        {
            "input": "Who is the advisor of Linda Smith? Give me the first name and last name.",
            "output": [
                "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\""
            ]
        },
        {
            "input": "Find the salary and manager number for those employees who is working under a manager.",
            "output": [
                "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\""
            ]
        },
        {
            "input": "display all the information about the department Marketing.",
            "output": [
                "SELECT * FROM  departments WHERE department_name  =  'Marketing'"
            ]
        },
        {
            "input": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
            "output": [
                "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
            ]
        },
        {
            "input": "List the name of musicals that do not have actors.",
            "output": [
                "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
            ]
        },
        {
            "input": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
            "output": [
                "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'"
            ]
        },
        {
            "input": "What is the decor of room Recluse and defiance?",
            "output": [
                "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\""
            ]
        },
        {
            "input": "What document type codes do we have?",
            "output": [
                "SELECT document_type_code FROM Ref_Document_Types"
            ]
        },
        {
            "input": "What is the id of every employee who has at least a salary of  100000?",
            "output": [
                "SELECT eid FROM Employee WHERE salary  >  100000"
            ]
        },
        {
            "input": "List all the cities in a decreasing order of each city's stations' highest latitude.",
            "output": [
                "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"
            ]
        },
        {
            "input": "Please show the employee last names that serves no more than 20 customers.",
            "output": [
                "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20"
            ]
        },
        {
            "input": "What are the distinct wineries which produce wines costing between 50 and 100?",
            "output": [
                "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100"
            ]
        },
        {
            "input": "What is the average distance and average price for flights from Los Angeles.",
            "output": [
                "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""
            ]
        },
        {
            "input": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
            "output": [
                "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate"
            ]
        },
        {
            "input": "Find the first names of all the teachers that teach in classroom 110.",
            "output": [
                "SELECT firstname FROM teachers WHERE classroom  =  110"
            ]
        },
        {
            "input": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
            "output": [
                "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\""
            ]
        },
        {
            "input": "Find the name of customers who do not have a loan with a type of Mortgages.",
            "output": [
                "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'"
            ]
        },
        {
            "input": "Find the name of companies that do not make DVD drive.",
            "output": [
                "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'"
            ]
        },
        {
            "input": "What is the average length in feet of the bridges?",
            "output": [
                "SELECT avg(length_feet) FROM bridge"
            ]
        },
        {
            "input": "Find the author for each submission and list them in ascending order of submission score.",
            "output": [
                "SELECT Author FROM submission ORDER BY Scores ASC"
            ]
        },
        {
            "input": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
            "output": [
                "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'"
            ]
        },
        {
            "input": "List the votes of elections in descending order.",
            "output": [
                "SELECT Votes FROM election ORDER BY Votes DESC"
            ]
        },
        {
            "input": "Which people severed as governor most frequently?",
            "output": [
                "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the full names and ages for all female students whose sex is F?",
            "output": [
                "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'"
            ]
        },
        {
            "input": "Show the denomination shared by more than one school.",
            "output": [
                "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1"
            ]
        },
        {
            "input": "How many tests have result \"Fail\"?",
            "output": [
                "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\""
            ]
        },
        {
            "input": "How many camera lenses have a focal length longer than 15 mm?",
            "output": [
                "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15"
            ]
        },
        {
            "input": "What are the distinct names of products purchased by at least two different customers?",
            "output": [
                "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2"
            ]
        },
        {
            "input": "What is the name of the department htat has no students minoring in it?",
            "output": [
                "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO"
            ]
        },
        {
            "input": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
            "output": [
                "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'"
            ]
        },
        {
            "input": "What are the names of all people who are friends with Alice for the shortest amount of time?",
            "output": [
                "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')"
            ]
        },
        {
            "input": "In which year were most departments established?",
            "output": [
                "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
            "output": [
                "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998"
            ]
        },
        {
            "input": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
            "output": [
                "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name"
            ]
        },
        {
            "input": "Show student ids for all male students.",
            "output": [
                "SELECT StuID FROM Student WHERE Sex  =  'M'"
            ]
        },
        {
            "input": "Show the flight number and distance of the flight with maximum price.",
            "output": [
                "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
            ]
        },
        {
            "input": "Return the address of store 1.",
            "output": [
                "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1"
            ]
        },
        {
            "input": "when is the hire date for those employees whose first name does not containing the letter M?",
            "output": [
                "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
            ]
        },
        {
            "input": "display the average salary of employees for each department who gets a commission percentage.",
            "output": [
                "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"
            ]
        },
        {
            "input": "How many problems does the product with the most problems have? List the number of the problems and product name.",
            "output": [
                "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the ids of the students who either registered or attended a course?",
            "output": [
                "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
            ]
        },
        {
            "input": "Find the name and partition id for users who tweeted less than twice.",
            "output": [
                "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"
            ]
        },
        {
            "input": "Who is the nominee who has been nominated for the most musicals?",
            "output": [
                "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What is the minimum, mean, and maximum age across all students?",
            "output": [
                "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"
            ]
        },
        {
            "input": "Which physicians are trained in procedures that are more expensive than 5000?",
            "output": [
                "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000"
            ]
        },
        {
            "input": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
            "output": [
                "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000"
            ]
        },
        {
            "input": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
            "output": [
                "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000"
            ]
        },
        {
            "input": "Return the poll source corresponding to the candidate who has the oppose rate.",
            "output": [
                "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"
            ]
        },
        {
            "input": "Which trip started from the station with the largest dock count? Give me the trip id.",
            "output": [
                "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"
            ]
        },
        {
            "input": "show the lowest low temperature and highest wind speed in miles per hour.",
            "output": [
                "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather"
            ]
        },
        {
            "input": "Show the nicknames of schools that are not in division 1.",
            "output": [
                "SELECT Nickname FROM school_details WHERE Division != \"Division 1\""
            ]
        },
        {
            "input": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
            "output": [
                "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4"
            ]
        },
        {
            "input": "Show the denomination of the school that has the most players.",
            "output": [
                "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names of customers who do not have any policies?",
            "output": [
                "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
            ]
        },
        {
            "input": "What is the average number of gold medals for clubs?",
            "output": [
                "SELECT avg(Gold) FROM club_rank"
            ]
        },
        {
            "input": "Show the average age for male and female students.",
            "output": [
                "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
            ]
        },
        {
            "input": "What is the oldest log id and its corresponding problem id?",
            "output": [
                "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1"
            ]
        },
        {
            "input": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
            "output": [
                "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\""
            ]
        },
        {
            "input": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
            "output": [
                "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""
            ]
        },
        {
            "input": "Count the number of patients who stayed in room 112.",
            "output": [
                "SELECT count(patient) FROM stay WHERE room  =  112"
            ]
        },
        {
            "input": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
            "output": [
                "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
            ]
        },
        {
            "input": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
            "output": [
                "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\""
            ]
        },
        {
            "input": "What is the average weight of all players?",
            "output": [
                "SELECT avg(weight) FROM Player"
            ]
        },
        {
            "input": "Show the flight number of flights with three lowest distances.",
            "output": [
                "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
            ]
        },
        {
            "input": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
            "output": [
                "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'"
            ]
        },
        {
            "input": "When and in what zip code did max temperature reach 80?",
            "output": [
                "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80"
            ]
        },
        {
            "input": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
            "output": [
                "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\""
            ]
        },
        {
            "input": "What are the 3 most common cloud covers in the zip code of 94107?",
            "output": [
                "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
            ]
        },
        {
            "input": "What are all the distinct premise types?",
            "output": [
                "SELECT DISTINCT premises_type FROM premises"
            ]
        },
        {
            "input": "What is the address of the restaurant Subway?",
            "output": [
                "SELECT Address FROM Restaurant WHERE ResName = \"Subway\""
            ]
        },
        {
            "input": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
            "output": [
                "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"
            ]
        },
        {
            "input": "What are the job ids corresponding to jobs with average salary above 8000?",
            "output": [
                "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000"
            ]
        },
        {
            "input": "How many courses that do not have prerequisite?",
            "output": [
                "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
            ]
        },
        {
            "input": "What are the names of enzymes who does not produce 'Heme'?",
            "output": [
                "SELECT name FROM enzyme WHERE product != 'Heme'"
            ]
        },
        {
            "input": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
            "output": [
                "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\""
            ]
        },
        {
            "input": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
            "output": [
                "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
            ]
        },
        {
            "input": "Find the names of schools that have some students playing in goalie and mid positions.",
            "output": [
                "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'"
            ]
        },
        {
            "input": "What are all the friends of Alice who are female?",
            "output": [
                "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'"
            ]
        },
        {
            "input": "Find the id of the candidate who got the lowest oppose rate.",
            "output": [
                "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
            ]
        },
        {
            "input": "Show the location codes and the number of documents in each location.",
            "output": [
                "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code"
            ]
        },
        {
            "input": "How many budget record has a budget amount smaller than the invested amount?",
            "output": [
                "SELECT count(*) FROM budget WHERE budgeted  <  invested"
            ]
        },
        {
            "input": "List all the names of schools with an endowment amount smaller than or equal to 10.",
            "output": [
                "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10"
            ]
        },
        {
            "input": "find the program owners that have some programs in both morning and night time.",
            "output": [
                "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\""
            ]
        },
        {
            "input": "what are the employee ids and job titles for employees in department 80?",
            "output": [
                "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80"
            ]
        },
        {
            "input": "Which counties have two or more delegates? Give me the county names.",
            "output": [
                "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "Return the maximum and minimum customer codes.",
            "output": [
                "SELECT max(customer_code) ,  min(customer_code) FROM Customers"
            ]
        },
        {
            "input": "What are the total number of students who are living in a male dorm?",
            "output": [
                "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'"
            ]
        },
        {
            "input": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
            "output": [
                "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"
            ]
        },
        {
            "input": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
            "output": [
                "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
            ]
        },
        {
            "input": "What is the alphabetically ordered list of all the distinct names of nurses?",
            "output": [
                "SELECT DISTINCT name FROM nurse ORDER BY name"
            ]
        },
        {
            "input": "What is the name of the document with the most number of sections?",
            "output": [
                "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "How many assets does each maintenance contract contain? List the number and the contract id.",
            "output": [
                "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id"
            ]
        },
        {
            "input": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
            "output": [
                "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'"
            ]
        },
        {
            "input": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
            "output": [
                "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
            ]
        },
        {
            "input": "How many students are over 18 and do not have allergy to food type or animal type?",
            "output": [
                "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"
            ]
        },
        {
            "input": "How many students are affected by cat allergies?",
            "output": [
                "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
            ]
        },
        {
            "input": "What is the entry name of the most expensive catalog (in USD)?",
            "output": [
                "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the ids of all employees who have authorized destruction.",
            "output": [
                "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
            ]
        },
        {
            "input": "What is the average age and how many male students are there in each city?",
            "output": [
                "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"
            ]
        },
        {
            "input": "What is the city with the smallest GDP? Return the city and its GDP.",
            "output": [
                "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1"
            ]
        },
        {
            "input": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
            "output": [
                "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100"
            ]
        },
        {
            "input": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
            "output": [
                "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
            ]
        },
        {
            "input": "Eduardo Martins is a customer at which company?",
            "output": [
                "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\""
            ]
        },
        {
            "input": "Find the name and email for the users who have more than one follower.",
            "output": [
                "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1"
            ]
        },
        {
            "input": "List the names of all distinct nurses ordered by alphabetical order?",
            "output": [
                "SELECT DISTINCT name FROM nurse ORDER BY name"
            ]
        },
        {
            "input": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
            "output": [
                "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50"
            ]
        },
        {
            "input": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
            "output": [
                "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
            ]
        },
        {
            "input": "What are the names of the physicians who have 'senior' in their titles.",
            "output": [
                "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"
            ]
        },
        {
            "input": "What is the names of the physicians who prescribe medication Thesisin?",
            "output": [
                "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\""
            ]
        },
        {
            "input": "What is the id of the candidate with the lowest oppose rate?",
            "output": [
                "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
            ]
        },
        {
            "input": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
            "output": [
                "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "What are the countries of markets and their corresponding years of market estimation?",
            "output": [
                "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID"
            ]
        },
        {
            "input": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
            "output": [
                "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000"
            ]
        },
        {
            "input": "What are the names of players who train between 500 and 1500 hours?",
            "output": [
                "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500"
            ]
        },
        {
            "input": "What information is there on albums from 2010?",
            "output": [
                "SELECT * FROM Albums WHERE YEAR  =  2010"
            ]
        },
        {
            "input": "Return the name of each physician and the number of patients he or she treats.",
            "output": [
                "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid"
            ]
        },
        {
            "input": "Show the top 3 most common colleges of players in match seasons.",
            "output": [
                "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "What are the employee ids for each employee and final dates of employment at their last job?",
            "output": [
                "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id"
            ]
        },
        {
            "input": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
            "output": [
                "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"
            ]
        },
        {
            "input": "For each bed type, find the average room price.",
            "output": [
                "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType"
            ]
        },
        {
            "input": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
            "output": [
                "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
            ]
        },
        {
            "input": "Count the number of universities that do not participate in the baketball match.",
            "output": [
                "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
            ]
        },
        {
            "input": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
            "output": [
                "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id"
            ]
        },
        {
            "input": "What is the language that was used most often in songs with resolution above 500?",
            "output": [
                "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
            "output": [
                "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id"
            ]
        },
        {
            "input": "What are the titles of courses that are offered in more than one department?",
            "output": [
                "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"
            ]
        },
        {
            "input": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
            "output": [
                "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"
            ]
        },
        {
            "input": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
            "output": [
                "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001"
            ]
        },
        {
            "input": "What are the checking and savings balances in accounts belonging to Brown?",
            "output": [
                "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
            ]
        },
        {
            "input": "Show the ids of all employees who have destroyed a document.",
            "output": [
                "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
            ]
        },
        {
            "input": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
            "output": [
                "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
            ]
        },
        {
            "input": "List the addresses of all the course authors or tutors.",
            "output": [
                "SELECT address_line_1 FROM Course_Authors_and_Tutors"
            ]
        },
        {
            "input": "What are the teams that have the 5 oldest players?",
            "output": [
                "SELECT Team FROM player ORDER BY Age DESC LIMIT 5"
            ]
        },
        {
            "input": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.",
            "output": [
                "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
            ]
        },
        {
            "input": "display those employees who joined after 7th September, 1987.",
            "output": [
                "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'"
            ]
        },
        {
            "input": "What are the names of the schools with some players in the mid position but no goalies?",
            "output": [
                "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'"
            ]
        },
        {
            "input": "List the name, born state and age of the heads of departments ordered by age.",
            "output": [
                "SELECT name ,  born_state ,  age FROM head ORDER BY age"
            ]
        },
        {
            "input": "What is the average balance in checking accounts?",
            "output": [
                "SELECT avg(balance) FROM checking"
            ]
        },
        {
            "input": "List title of albums have the number of tracks greater than 10.",
            "output": [
                "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10"
            ]
        },
        {
            "input": "What is the name and sex of the candidate with the highest support rate?",
            "output": [
                "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
            ]
        },
        {
            "input": "Show the name of aircrafts with top three lowest distances.",
            "output": [
                "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
            ]
        },
        {
            "input": "Show the number of all customers without an account.",
            "output": [
                "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
            ]
        },
        {
            "input": "Show the season, the player, and the name of the country that player belongs to.",
            "output": [
                "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country"
            ]
        },
        {
            "input": "What is the average number of gold medals for a club?",
            "output": [
                "SELECT avg(Gold) FROM club_rank"
            ]
        },
        {
            "input": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
            "output": [
                "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id"
            ]
        },
        {
            "input": "Show the school name and driver name for all school buses.",
            "output": [
                "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id"
            ]
        },
        {
            "input": "Who are the lieutenant governor and comptroller from the democratic party?",
            "output": [
                "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
            ]
        },
        {
            "input": "What are the student ids of students who don't have any allergies?",
            "output": [
                "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
            ]
        },
        {
            "input": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
            "output": [
                "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"
            ]
        }
    ]
}